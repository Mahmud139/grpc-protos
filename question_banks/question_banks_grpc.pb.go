// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: question_banks.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuestionBankService_CreateQuestionBank_FullMethodName            = "/questionbanks.QuestionBankService/CreateQuestionBank"
	QuestionBankService_GetAllQuestionBanks_FullMethodName           = "/questionbanks.QuestionBankService/GetAllQuestionBanks"
	QuestionBankService_DeleteQuestionBank_FullMethodName            = "/questionbanks.QuestionBankService/DeleteQuestionBank"
	QuestionBankService_UpdateQuestionBankName_FullMethodName        = "/questionbanks.QuestionBankService/UpdateQuestionBankName"
	QuestionBankService_CreateQuestion_FullMethodName                = "/questionbanks.QuestionBankService/CreateQuestion"
	QuestionBankService_GetQuestions_FullMethodName                  = "/questionbanks.QuestionBankService/GetQuestions"
	QuestionBankService_GetQuestionsByQuestionBankIds_FullMethodName = "/questionbanks.QuestionBankService/GetQuestionsByQuestionBankIds"
	QuestionBankService_UpdateQuestion_FullMethodName                = "/questionbanks.QuestionBankService/UpdateQuestion"
	QuestionBankService_DeleteQuestion_FullMethodName                = "/questionbanks.QuestionBankService/DeleteQuestion"
)

// QuestionBankServiceClient is the client API for QuestionBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SERVICE
type QuestionBankServiceClient interface {
	CreateQuestionBank(ctx context.Context, in *CreateQuestionBankRequest, opts ...grpc.CallOption) (*CreateQuestionBankResponse, error)
	GetAllQuestionBanks(ctx context.Context, in *GetAllQuestionBanksRequest, opts ...grpc.CallOption) (*GetAllQuestionBanksResponse, error)
	DeleteQuestionBank(ctx context.Context, in *DeleteQuestionBankRequest, opts ...grpc.CallOption) (*DeleteQuestionBankResponse, error)
	UpdateQuestionBankName(ctx context.Context, in *UpdateQuestionBankNameRequest, opts ...grpc.CallOption) (*UpdateQuestionBankNameResponse, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	GetQuestionsByQuestionBankIds(ctx context.Context, in *GetQuestionsByQuestionBankIdsRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionBankIdsResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
}

type questionBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionBankServiceClient(cc grpc.ClientConnInterface) QuestionBankServiceClient {
	return &questionBankServiceClient{cc}
}

func (c *questionBankServiceClient) CreateQuestionBank(ctx context.Context, in *CreateQuestionBankRequest, opts ...grpc.CallOption) (*CreateQuestionBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionBankResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_CreateQuestionBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) GetAllQuestionBanks(ctx context.Context, in *GetAllQuestionBanksRequest, opts ...grpc.CallOption) (*GetAllQuestionBanksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllQuestionBanksResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_GetAllQuestionBanks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) DeleteQuestionBank(ctx context.Context, in *DeleteQuestionBankRequest, opts ...grpc.CallOption) (*DeleteQuestionBankResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionBankResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_DeleteQuestionBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) UpdateQuestionBankName(ctx context.Context, in *UpdateQuestionBankNameRequest, opts ...grpc.CallOption) (*UpdateQuestionBankNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionBankNameResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_UpdateQuestionBankName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsRequest, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_GetQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) GetQuestionsByQuestionBankIds(ctx context.Context, in *GetQuestionsByQuestionBankIdsRequest, opts ...grpc.CallOption) (*GetQuestionsByQuestionBankIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionsByQuestionBankIdsResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_GetQuestionsByQuestionBankIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionBankServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, QuestionBankService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionBankServiceServer is the server API for QuestionBankService service.
// All implementations must embed UnimplementedQuestionBankServiceServer
// for forward compatibility.
//
// SERVICE
type QuestionBankServiceServer interface {
	CreateQuestionBank(context.Context, *CreateQuestionBankRequest) (*CreateQuestionBankResponse, error)
	GetAllQuestionBanks(context.Context, *GetAllQuestionBanksRequest) (*GetAllQuestionBanksResponse, error)
	DeleteQuestionBank(context.Context, *DeleteQuestionBankRequest) (*DeleteQuestionBankResponse, error)
	UpdateQuestionBankName(context.Context, *UpdateQuestionBankNameRequest) (*UpdateQuestionBankNameResponse, error)
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error)
	GetQuestionsByQuestionBankIds(context.Context, *GetQuestionsByQuestionBankIdsRequest) (*GetQuestionsByQuestionBankIdsResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	mustEmbedUnimplementedQuestionBankServiceServer()
}

// UnimplementedQuestionBankServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuestionBankServiceServer struct{}

func (UnimplementedQuestionBankServiceServer) CreateQuestionBank(context.Context, *CreateQuestionBankRequest) (*CreateQuestionBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionBank not implemented")
}
func (UnimplementedQuestionBankServiceServer) GetAllQuestionBanks(context.Context, *GetAllQuestionBanksRequest) (*GetAllQuestionBanksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllQuestionBanks not implemented")
}
func (UnimplementedQuestionBankServiceServer) DeleteQuestionBank(context.Context, *DeleteQuestionBankRequest) (*DeleteQuestionBankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionBank not implemented")
}
func (UnimplementedQuestionBankServiceServer) UpdateQuestionBankName(context.Context, *UpdateQuestionBankNameRequest) (*UpdateQuestionBankNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionBankName not implemented")
}
func (UnimplementedQuestionBankServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionBankServiceServer) GetQuestions(context.Context, *GetQuestionsRequest) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedQuestionBankServiceServer) GetQuestionsByQuestionBankIds(context.Context, *GetQuestionsByQuestionBankIdsRequest) (*GetQuestionsByQuestionBankIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionsByQuestionBankIds not implemented")
}
func (UnimplementedQuestionBankServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionBankServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionBankServiceServer) mustEmbedUnimplementedQuestionBankServiceServer() {}
func (UnimplementedQuestionBankServiceServer) testEmbeddedByValue()                             {}

// UnsafeQuestionBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionBankServiceServer will
// result in compilation errors.
type UnsafeQuestionBankServiceServer interface {
	mustEmbedUnimplementedQuestionBankServiceServer()
}

func RegisterQuestionBankServiceServer(s grpc.ServiceRegistrar, srv QuestionBankServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuestionBankServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuestionBankService_ServiceDesc, srv)
}

func _QuestionBankService_CreateQuestionBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).CreateQuestionBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_CreateQuestionBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).CreateQuestionBank(ctx, req.(*CreateQuestionBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_GetAllQuestionBanks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllQuestionBanksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).GetAllQuestionBanks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_GetAllQuestionBanks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).GetAllQuestionBanks(ctx, req.(*GetAllQuestionBanksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_DeleteQuestionBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).DeleteQuestionBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_DeleteQuestionBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).DeleteQuestionBank(ctx, req.(*DeleteQuestionBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_UpdateQuestionBankName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionBankNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).UpdateQuestionBankName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_UpdateQuestionBankName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).UpdateQuestionBankName(ctx, req.(*UpdateQuestionBankNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).GetQuestions(ctx, req.(*GetQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_GetQuestionsByQuestionBankIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsByQuestionBankIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).GetQuestionsByQuestionBankIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_GetQuestionsByQuestionBankIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).GetQuestionsByQuestionBankIds(ctx, req.(*GetQuestionsByQuestionBankIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionBankService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionBankServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuestionBankService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionBankServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionBankService_ServiceDesc is the grpc.ServiceDesc for QuestionBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questionbanks.QuestionBankService",
	HandlerType: (*QuestionBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestionBank",
			Handler:    _QuestionBankService_CreateQuestionBank_Handler,
		},
		{
			MethodName: "GetAllQuestionBanks",
			Handler:    _QuestionBankService_GetAllQuestionBanks_Handler,
		},
		{
			MethodName: "DeleteQuestionBank",
			Handler:    _QuestionBankService_DeleteQuestionBank_Handler,
		},
		{
			MethodName: "UpdateQuestionBankName",
			Handler:    _QuestionBankService_UpdateQuestionBankName_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionBankService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestions",
			Handler:    _QuestionBankService_GetQuestions_Handler,
		},
		{
			MethodName: "GetQuestionsByQuestionBankIds",
			Handler:    _QuestionBankService_GetQuestionsByQuestionBankIds_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionBankService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionBankService_DeleteQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question_banks.proto",
}
