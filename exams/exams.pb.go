// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.1
// source: exams.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --- Config types ---
type ExamType int32

const (
	ExamType_TIMED    ExamType = 0
	ExamType_DEADLINE ExamType = 1
)

// Enum value maps for ExamType.
var (
	ExamType_name = map[int32]string{
		0: "TIMED",
		1: "DEADLINE",
	}
	ExamType_value = map[string]int32{
		"TIMED":    0,
		"DEADLINE": 1,
	}
)

func (x ExamType) Enum() *ExamType {
	p := new(ExamType)
	*p = x
	return p
}

func (x ExamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamType) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[0].Descriptor()
}

func (ExamType) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[0]
}

func (x ExamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamType.Descriptor instead.
func (ExamType) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{0}
}

// --- Status enum ---
type ExamStatus int32

const (
	ExamStatus_UNKNOWN     ExamStatus = 0
	ExamStatus_SCHEDULED   ExamStatus = 1
	ExamStatus_LIVE        ExamStatus = 2
	ExamStatus_COMPLETED   ExamStatus = 3
	ExamStatus_GRADED      ExamStatus = 4
	ExamStatus_PUBLISHED   ExamStatus = 5
	ExamStatus_UNSCHEDULED ExamStatus = 6
	ExamStatus_UNGRADED    ExamStatus = 7
	ExamStatus_UNPUBLISHED ExamStatus = 8
)

// Enum value maps for ExamStatus.
var (
	ExamStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCHEDULED",
		2: "LIVE",
		3: "COMPLETED",
		4: "GRADED",
		5: "PUBLISHED",
		6: "UNSCHEDULED",
		7: "UNGRADED",
		8: "UNPUBLISHED",
	}
	ExamStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"SCHEDULED":   1,
		"LIVE":        2,
		"COMPLETED":   3,
		"GRADED":      4,
		"PUBLISHED":   5,
		"UNSCHEDULED": 6,
		"UNGRADED":    7,
		"UNPUBLISHED": 8,
	}
)

func (x ExamStatus) Enum() *ExamStatus {
	p := new(ExamStatus)
	*p = x
	return p
}

func (x ExamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[1].Descriptor()
}

func (ExamStatus) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[1]
}

func (x ExamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamStatus.Descriptor instead.
func (ExamStatus) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{1}
}

type StartMode int32

const (
	StartMode_START_MODE_UNSPECIFIED StartMode = 0
	StartMode_START_MODE_SCHEDULED   StartMode = 1
	StartMode_START_MODE_MANUAL      StartMode = 2
)

// Enum value maps for StartMode.
var (
	StartMode_name = map[int32]string{
		0: "START_MODE_UNSPECIFIED",
		1: "START_MODE_SCHEDULED",
		2: "START_MODE_MANUAL",
	}
	StartMode_value = map[string]int32{
		"START_MODE_UNSPECIFIED": 0,
		"START_MODE_SCHEDULED":   1,
		"START_MODE_MANUAL":      2,
	}
)

func (x StartMode) Enum() *StartMode {
	p := new(StartMode)
	*p = x
	return p
}

func (x StartMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[2].Descriptor()
}

func (StartMode) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[2]
}

func (x StartMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartMode.Descriptor instead.
func (StartMode) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{2}
}

// ENUMS
type QuestionType int32

const (
	QuestionType_QUESTION_TYPE_UNSPECIFIED QuestionType = 0
	QuestionType_MCQ                       QuestionType = 1
	QuestionType_TRUE_FALSE                QuestionType = 2
	QuestionType_CHECKBOX                  QuestionType = 3
	QuestionType_FILL_IN_THE_BLANKS        QuestionType = 4
	QuestionType_SHORT_LONG_ANSWER         QuestionType = 5
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "QUESTION_TYPE_UNSPECIFIED",
		1: "MCQ",
		2: "TRUE_FALSE",
		3: "CHECKBOX",
		4: "FILL_IN_THE_BLANKS",
		5: "SHORT_LONG_ANSWER",
	}
	QuestionType_value = map[string]int32{
		"QUESTION_TYPE_UNSPECIFIED": 0,
		"MCQ":                       1,
		"TRUE_FALSE":                2,
		"CHECKBOX":                  3,
		"FILL_IN_THE_BLANKS":        4,
		"SHORT_LONG_ANSWER":         5,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[3].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[3]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{3}
}

type ExamEvent_EventType int32

const (
	ExamEvent_EXAM_STARTED ExamEvent_EventType = 0
	ExamEvent_TIME_SYNC    ExamEvent_EventType = 1
	ExamEvent_EXAM_ENDED   ExamEvent_EventType = 2
)

// Enum value maps for ExamEvent_EventType.
var (
	ExamEvent_EventType_name = map[int32]string{
		0: "EXAM_STARTED",
		1: "TIME_SYNC",
		2: "EXAM_ENDED",
	}
	ExamEvent_EventType_value = map[string]int32{
		"EXAM_STARTED": 0,
		"TIME_SYNC":    1,
		"EXAM_ENDED":   2,
	}
)

func (x ExamEvent_EventType) Enum() *ExamEvent_EventType {
	p := new(ExamEvent_EventType)
	*p = x
	return p
}

func (x ExamEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[4].Descriptor()
}

func (ExamEvent_EventType) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[4]
}

func (x ExamEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamEvent_EventType.Descriptor instead.
func (ExamEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{44, 0}
}

type SubmitGradingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentUid    string                 `protobuf:"bytes,1,opt,name=student_uid,json=studentUid,proto3" json:"student_uid,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	TeacherUid    string                 `protobuf:"bytes,3,opt,name=teacher_uid,json=teacherUid,proto3" json:"teacher_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitGradingRequest) Reset() {
	*x = SubmitGradingRequest{}
	mi := &file_exams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitGradingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitGradingRequest) ProtoMessage() {}

func (x *SubmitGradingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitGradingRequest.ProtoReflect.Descriptor instead.
func (*SubmitGradingRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitGradingRequest) GetStudentUid() string {
	if x != nil {
		return x.StudentUid
	}
	return ""
}

func (x *SubmitGradingRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *SubmitGradingRequest) GetTeacherUid() string {
	if x != nil {
		return x.TeacherUid
	}
	return ""
}

type SubmitGradingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitGradingResponse) Reset() {
	*x = SubmitGradingResponse{}
	mi := &file_exams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitGradingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitGradingResponse) ProtoMessage() {}

func (x *SubmitGradingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitGradingResponse.ProtoReflect.Descriptor instead.
func (*SubmitGradingResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitGradingResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type QuestionWithAnswer struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // "mcq", "checkbox", "true-false", "short-long", "fill-blanks"
	Text       string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Score      int32                  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	Difficulty string                 `protobuf:"bytes,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"` // "easy", "medium", "hard"
	Options    []*OptionItem          `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`       // For MCQ/Checkbox
	Blanks     []*BlankItem           `protobuf:"bytes,7,rep,name=blanks,proto3" json:"blanks,omitempty"`         // For Fill-blanks
	// Correct answers (one or more populated based on type)
	TfAnswer           bool     `protobuf:"varint,8,opt,name=tf_answer,json=tfAnswer,proto3" json:"tf_answer,omitempty"`
	ShortLongAnswer    string   `protobuf:"bytes,9,opt,name=short_long_answer,json=shortLongAnswer,proto3" json:"short_long_answer,omitempty"`
	McqCheckboxAnswers []string `protobuf:"bytes,10,rep,name=mcq_checkbox_answers,json=mcqCheckboxAnswers,proto3" json:"mcq_checkbox_answers,omitempty"`
	// Student answers (one or more populated based on type)
	TfStudentAnswer          bool     `protobuf:"varint,11,opt,name=tf_student_answer,json=tfStudentAnswer,proto3" json:"tf_student_answer,omitempty"`
	ShortLongStudentAnswer   string   `protobuf:"bytes,12,opt,name=short_long_student_answer,json=shortLongStudentAnswer,proto3" json:"short_long_student_answer,omitempty"`
	McqCheckboxStudentAnswer []string `protobuf:"bytes,13,rep,name=mcq_checkbox_student_answer,json=mcqCheckboxStudentAnswer,proto3" json:"mcq_checkbox_student_answer,omitempty"`
	GivenScore               int32    `protobuf:"varint,14,opt,name=given_score,json=givenScore,proto3" json:"given_score,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *QuestionWithAnswer) Reset() {
	*x = QuestionWithAnswer{}
	mi := &file_exams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionWithAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionWithAnswer) ProtoMessage() {}

func (x *QuestionWithAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionWithAnswer.ProtoReflect.Descriptor instead.
func (*QuestionWithAnswer) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{2}
}

func (x *QuestionWithAnswer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionWithAnswer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QuestionWithAnswer) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *QuestionWithAnswer) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuestionWithAnswer) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *QuestionWithAnswer) GetOptions() []*OptionItem {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *QuestionWithAnswer) GetBlanks() []*BlankItem {
	if x != nil {
		return x.Blanks
	}
	return nil
}

func (x *QuestionWithAnswer) GetTfAnswer() bool {
	if x != nil {
		return x.TfAnswer
	}
	return false
}

func (x *QuestionWithAnswer) GetShortLongAnswer() string {
	if x != nil {
		return x.ShortLongAnswer
	}
	return ""
}

func (x *QuestionWithAnswer) GetMcqCheckboxAnswers() []string {
	if x != nil {
		return x.McqCheckboxAnswers
	}
	return nil
}

func (x *QuestionWithAnswer) GetTfStudentAnswer() bool {
	if x != nil {
		return x.TfStudentAnswer
	}
	return false
}

func (x *QuestionWithAnswer) GetShortLongStudentAnswer() string {
	if x != nil {
		return x.ShortLongStudentAnswer
	}
	return ""
}

func (x *QuestionWithAnswer) GetMcqCheckboxStudentAnswer() []string {
	if x != nil {
		return x.McqCheckboxStudentAnswer
	}
	return nil
}

func (x *QuestionWithAnswer) GetGivenScore() int32 {
	if x != nil {
		return x.GivenScore
	}
	return 0
}

type OptionItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionItem) Reset() {
	*x = OptionItem{}
	mi := &file_exams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionItem) ProtoMessage() {}

func (x *OptionItem) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionItem.ProtoReflect.Descriptor instead.
func (*OptionItem) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{3}
}

func (x *OptionItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OptionItem) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type BlankItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CorrectAnswer string                 `protobuf:"bytes,2,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"`
	StudentAnswer string                 `protobuf:"bytes,3,opt,name=student_answer,json=studentAnswer,proto3" json:"student_answer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlankItem) Reset() {
	*x = BlankItem{}
	mi := &file_exams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlankItem) ProtoMessage() {}

func (x *BlankItem) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlankItem.ProtoReflect.Descriptor instead.
func (*BlankItem) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{4}
}

func (x *BlankItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BlankItem) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *BlankItem) GetStudentAnswer() string {
	if x != nil {
		return x.StudentAnswer
	}
	return ""
}

type ExamMetadata struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ExamId         string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamName       string                 `protobuf:"bytes,2,opt,name=exam_name,json=examName,proto3" json:"exam_name,omitempty"`
	ExamSubject    string                 `protobuf:"bytes,3,opt,name=exam_subject,json=examSubject,proto3" json:"exam_subject,omitempty"`
	TotalMarks     int32                  `protobuf:"varint,4,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	TotalQuestions int32                  `protobuf:"varint,5,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExamMetadata) Reset() {
	*x = ExamMetadata{}
	mi := &file_exams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamMetadata) ProtoMessage() {}

func (x *ExamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamMetadata.ProtoReflect.Descriptor instead.
func (*ExamMetadata) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{5}
}

func (x *ExamMetadata) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamMetadata) GetExamName() string {
	if x != nil {
		return x.ExamName
	}
	return ""
}

func (x *ExamMetadata) GetExamSubject() string {
	if x != nil {
		return x.ExamSubject
	}
	return ""
}

func (x *ExamMetadata) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *ExamMetadata) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

type StudentMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	StudentId        string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName      string                 `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	StudentEmail     string                 `protobuf:"bytes,3,opt,name=student_email,json=studentEmail,proto3" json:"student_email,omitempty"`
	StudentRollNo    string                 `protobuf:"bytes,4,opt,name=student_roll_no,json=studentRollNo,proto3" json:"student_roll_no,omitempty"`
	StudentGrade     string                 `protobuf:"bytes,5,opt,name=student_grade,json=studentGrade,proto3" json:"student_grade,omitempty"`
	SubmittedAt      string                 `protobuf:"bytes,6,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	TimeSpentMinutes int32                  `protobuf:"varint,7,opt,name=time_spent_minutes,json=timeSpentMinutes,proto3" json:"time_spent_minutes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StudentMetadata) Reset() {
	*x = StudentMetadata{}
	mi := &file_exams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentMetadata) ProtoMessage() {}

func (x *StudentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentMetadata.ProtoReflect.Descriptor instead.
func (*StudentMetadata) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{6}
}

func (x *StudentMetadata) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentMetadata) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentMetadata) GetStudentEmail() string {
	if x != nil {
		return x.StudentEmail
	}
	return ""
}

func (x *StudentMetadata) GetStudentRollNo() string {
	if x != nil {
		return x.StudentRollNo
	}
	return ""
}

func (x *StudentMetadata) GetStudentGrade() string {
	if x != nil {
		return x.StudentGrade
	}
	return ""
}

func (x *StudentMetadata) GetSubmittedAt() string {
	if x != nil {
		return x.SubmittedAt
	}
	return ""
}

func (x *StudentMetadata) GetTimeSpentMinutes() int32 {
	if x != nil {
		return x.TimeSpentMinutes
	}
	return 0
}

type GetQuestionsWithStudentAnswersResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	QuestionsWithAnswers []*QuestionWithAnswer  `protobuf:"bytes,1,rep,name=questions_with_answers,json=questionsWithAnswers,proto3" json:"questions_with_answers,omitempty"`
	ExamMetadata         *ExamMetadata          `protobuf:"bytes,2,opt,name=exam_metadata,json=examMetadata,proto3" json:"exam_metadata,omitempty"`
	StudentMetadata      *StudentMetadata       `protobuf:"bytes,3,opt,name=student_metadata,json=studentMetadata,proto3" json:"student_metadata,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetQuestionsWithStudentAnswersResponse) Reset() {
	*x = GetQuestionsWithStudentAnswersResponse{}
	mi := &file_exams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsWithStudentAnswersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsWithStudentAnswersResponse) ProtoMessage() {}

func (x *GetQuestionsWithStudentAnswersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsWithStudentAnswersResponse.ProtoReflect.Descriptor instead.
func (*GetQuestionsWithStudentAnswersResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{7}
}

func (x *GetQuestionsWithStudentAnswersResponse) GetQuestionsWithAnswers() []*QuestionWithAnswer {
	if x != nil {
		return x.QuestionsWithAnswers
	}
	return nil
}

func (x *GetQuestionsWithStudentAnswersResponse) GetExamMetadata() *ExamMetadata {
	if x != nil {
		return x.ExamMetadata
	}
	return nil
}

func (x *GetQuestionsWithStudentAnswersResponse) GetStudentMetadata() *StudentMetadata {
	if x != nil {
		return x.StudentMetadata
	}
	return nil
}

type GetQuestionsWithStudentAnswersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentUid    string                 `protobuf:"bytes,1,opt,name=student_uid,json=studentUid,proto3" json:"student_uid,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	TeacherUid    string                 `protobuf:"bytes,3,opt,name=teacher_uid,json=teacherUid,proto3" json:"teacher_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuestionsWithStudentAnswersRequest) Reset() {
	*x = GetQuestionsWithStudentAnswersRequest{}
	mi := &file_exams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuestionsWithStudentAnswersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionsWithStudentAnswersRequest) ProtoMessage() {}

func (x *GetQuestionsWithStudentAnswersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionsWithStudentAnswersRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionsWithStudentAnswersRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{8}
}

func (x *GetQuestionsWithStudentAnswersRequest) GetStudentUid() string {
	if x != nil {
		return x.StudentUid
	}
	return ""
}

func (x *GetQuestionsWithStudentAnswersRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetQuestionsWithStudentAnswersRequest) GetTeacherUid() string {
	if x != nil {
		return x.TeacherUid
	}
	return ""
}

type SaveStudentScoreRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentUid    string                 `protobuf:"bytes,1,opt,name=student_uid,json=studentUid,proto3" json:"student_uid,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	TeacherUid    string                 `protobuf:"bytes,3,opt,name=teacher_uid,json=teacherUid,proto3" json:"teacher_uid,omitempty"`
	QuestionId    string                 `protobuf:"bytes,4,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Score         int32                  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStudentScoreRequest) Reset() {
	*x = SaveStudentScoreRequest{}
	mi := &file_exams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStudentScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStudentScoreRequest) ProtoMessage() {}

func (x *SaveStudentScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStudentScoreRequest.ProtoReflect.Descriptor instead.
func (*SaveStudentScoreRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{9}
}

func (x *SaveStudentScoreRequest) GetStudentUid() string {
	if x != nil {
		return x.StudentUid
	}
	return ""
}

func (x *SaveStudentScoreRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *SaveStudentScoreRequest) GetTeacherUid() string {
	if x != nil {
		return x.TeacherUid
	}
	return ""
}

func (x *SaveStudentScoreRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SaveStudentScoreRequest) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SaveStudentScoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStudentScoreResponse) Reset() {
	*x = SaveStudentScoreResponse{}
	mi := &file_exams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStudentScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStudentScoreResponse) ProtoMessage() {}

func (x *SaveStudentScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStudentScoreResponse.ProtoReflect.Descriptor instead.
func (*SaveStudentScoreResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{10}
}

func (x *SaveStudentScoreResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SaveStudentFeedbackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentUid    string                 `protobuf:"bytes,1,opt,name=student_uid,json=studentUid,proto3" json:"student_uid,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	TeacherUid    string                 `protobuf:"bytes,3,opt,name=teacher_uid,json=teacherUid,proto3" json:"teacher_uid,omitempty"`
	QuestionId    string                 `protobuf:"bytes,4,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Feedback      string                 `protobuf:"bytes,5,opt,name=feedback,proto3" json:"feedback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStudentFeedbackRequest) Reset() {
	*x = SaveStudentFeedbackRequest{}
	mi := &file_exams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStudentFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStudentFeedbackRequest) ProtoMessage() {}

func (x *SaveStudentFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStudentFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SaveStudentFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{11}
}

func (x *SaveStudentFeedbackRequest) GetStudentUid() string {
	if x != nil {
		return x.StudentUid
	}
	return ""
}

func (x *SaveStudentFeedbackRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *SaveStudentFeedbackRequest) GetTeacherUid() string {
	if x != nil {
		return x.TeacherUid
	}
	return ""
}

func (x *SaveStudentFeedbackRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SaveStudentFeedbackRequest) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

type SaveStudentFeedbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveStudentFeedbackResponse) Reset() {
	*x = SaveStudentFeedbackResponse{}
	mi := &file_exams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveStudentFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStudentFeedbackResponse) ProtoMessage() {}

func (x *SaveStudentFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStudentFeedbackResponse.ProtoReflect.Descriptor instead.
func (*SaveStudentFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{12}
}

func (x *SaveStudentFeedbackResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Exam struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy           string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ExamId              string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamKey             string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"` // unique exam key for the student to join the exam
	Name                string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Subject             string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	ExamType            ExamType               `protobuf:"varint,7,opt,name=exam_type,json=examType,proto3,enum=exams.ExamType" json:"exam_type,omitempty"`
	Status              ExamStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=exams.ExamStatus" json:"status,omitempty"`
	CreatedAt           string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string                 `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TotalMarks          int32                  `protobuf:"varint,11,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	TotalQuestions      int32                  `protobuf:"varint,12,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	ActualStartDateTime string                 `protobuf:"bytes,13,opt,name=actual_start_date_time,json=actualStartDateTime,proto3" json:"actual_start_date_time,omitempty"`
	ActualEndDateTime   string                 `protobuf:"bytes,14,opt,name=actual_end_date_time,json=actualEndDateTime,proto3" json:"actual_end_date_time,omitempty"`
	// common
	QuestionBankIds    []string `protobuf:"bytes,15,rep,name=question_bank_ids,json=questionBankIds,proto3" json:"question_bank_ids,omitempty"`
	RandomizeQuestions bool     `protobuf:"varint,16,opt,name=randomize_questions,json=randomizeQuestions,proto3" json:"randomize_questions,omitempty"`
	RandomizeOptions   bool     `protobuf:"varint,17,opt,name=randomize_options,json=randomizeOptions,proto3" json:"randomize_options,omitempty"`
	// timed
	Duration               int32     `protobuf:"varint,18,opt,name=duration,proto3" json:"duration,omitempty"`
	StartMode              StartMode `protobuf:"varint,19,opt,name=start_mode,json=startMode,proto3,enum=exams.StartMode" json:"start_mode,omitempty"`
	ScheduledStartDateTime string    `protobuf:"bytes,20,opt,name=scheduled_start_date_time,json=scheduledStartDateTime,proto3" json:"scheduled_start_date_time,omitempty"`
	// deadline
	StartDateTime       string `protobuf:"bytes,21,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	EndDateTime         string `protobuf:"bytes,22,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty"`
	PerStudentTimeLimit bool   `protobuf:"varint,23,opt,name=per_student_time_limit,json=perStudentTimeLimit,proto3" json:"per_student_time_limit,omitempty"`
	PerStudentDuration  int32  `protobuf:"varint,24,opt,name=per_student_duration,json=perStudentDuration,proto3" json:"per_student_duration,omitempty"`
	TeacherName         string `protobuf:"bytes,25,opt,name=teacher_name,json=teacherName,proto3" json:"teacher_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Exam) Reset() {
	*x = Exam{}
	mi := &file_exams_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exam) ProtoMessage() {}

func (x *Exam) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exam.ProtoReflect.Descriptor instead.
func (*Exam) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{13}
}

func (x *Exam) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Exam) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *Exam) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *Exam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Exam) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Exam) GetExamType() ExamType {
	if x != nil {
		return x.ExamType
	}
	return ExamType_TIMED
}

func (x *Exam) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_UNKNOWN
}

func (x *Exam) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Exam) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Exam) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *Exam) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *Exam) GetActualStartDateTime() string {
	if x != nil {
		return x.ActualStartDateTime
	}
	return ""
}

func (x *Exam) GetActualEndDateTime() string {
	if x != nil {
		return x.ActualEndDateTime
	}
	return ""
}

func (x *Exam) GetQuestionBankIds() []string {
	if x != nil {
		return x.QuestionBankIds
	}
	return nil
}

func (x *Exam) GetRandomizeQuestions() bool {
	if x != nil {
		return x.RandomizeQuestions
	}
	return false
}

func (x *Exam) GetRandomizeOptions() bool {
	if x != nil {
		return x.RandomizeOptions
	}
	return false
}

func (x *Exam) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Exam) GetStartMode() StartMode {
	if x != nil {
		return x.StartMode
	}
	return StartMode_START_MODE_UNSPECIFIED
}

func (x *Exam) GetScheduledStartDateTime() string {
	if x != nil {
		return x.ScheduledStartDateTime
	}
	return ""
}

func (x *Exam) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *Exam) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

func (x *Exam) GetPerStudentTimeLimit() bool {
	if x != nil {
		return x.PerStudentTimeLimit
	}
	return false
}

func (x *Exam) GetPerStudentDuration() int32 {
	if x != nil {
		return x.PerStudentDuration
	}
	return 0
}

func (x *Exam) GetTeacherName() string {
	if x != nil {
		return x.TeacherName
	}
	return ""
}

//	enum Difficulty {
//	    DIFFICULTY_UNSPECIFIED = 0;
//	    EASY = 1;
//	    MEDIUM = 2;
//	    HARD = 3;
//	}
//
// MESSAGES
type QuestionOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Text          string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionOption) Reset() {
	*x = QuestionOption{}
	mi := &file_exams_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionOption) ProtoMessage() {}

func (x *QuestionOption) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionOption.ProtoReflect.Descriptor instead.
func (*QuestionOption) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{14}
}

func (x *QuestionOption) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QuestionOption) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionOption) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Blank struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuestionId       string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	PlaceholderOrder int32                  `protobuf:"varint,4,opt,name=placeholder_order,json=placeholderOrder,proto3" json:"placeholder_order,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Blank) Reset() {
	*x = Blank{}
	mi := &file_exams_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Blank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blank) ProtoMessage() {}

func (x *Blank) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blank.ProtoReflect.Descriptor instead.
func (*Blank) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{15}
}

func (x *Blank) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Blank) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *Blank) GetPlaceholderOrder() int32 {
	if x != nil {
		return x.PlaceholderOrder
	}
	return 0
}

type StudentQuestion struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            QuestionType           `protobuf:"varint,2,opt,name=type,proto3,enum=exams.QuestionType" json:"type,omitempty"`
	QuestionContent string                 `protobuf:"bytes,3,opt,name=question_content,json=questionContent,proto3" json:"question_content,omitempty"`
	Options         []*QuestionOption      `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	Blanks          []*Blank               `protobuf:"bytes,5,rep,name=blanks,proto3" json:"blanks,omitempty"`
	Score           int32                  `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
	ImageUrl        string                 `protobuf:"bytes,7,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StudentQuestion) Reset() {
	*x = StudentQuestion{}
	mi := &file_exams_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentQuestion) ProtoMessage() {}

func (x *StudentQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentQuestion.ProtoReflect.Descriptor instead.
func (*StudentQuestion) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{16}
}

func (x *StudentQuestion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StudentQuestion) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_QUESTION_TYPE_UNSPECIFIED
}

func (x *StudentQuestion) GetQuestionContent() string {
	if x != nil {
		return x.QuestionContent
	}
	return ""
}

func (x *StudentQuestion) GetOptions() []*QuestionOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StudentQuestion) GetBlanks() []*Blank {
	if x != nil {
		return x.Blanks
	}
	return nil
}

func (x *StudentQuestion) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *StudentQuestion) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

type ExamInfo struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ExamId                       string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamKey                      string                 `protobuf:"bytes,2,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	ExamName                     string                 `protobuf:"bytes,3,opt,name=exam_name,json=examName,proto3" json:"exam_name,omitempty"`
	ExamSubject                  string                 `protobuf:"bytes,4,opt,name=exam_subject,json=examSubject,proto3" json:"exam_subject,omitempty"`
	TotalMarks                   int32                  `protobuf:"varint,5,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	ExamType                     string                 `protobuf:"bytes,6,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	ActualStartDateTime          string                 `protobuf:"bytes,7,opt,name=actual_start_date_time,json=actualStartDateTime,proto3" json:"actual_start_date_time,omitempty"`
	ActualEndDateTime            string                 `protobuf:"bytes,8,opt,name=actual_end_date_time,json=actualEndDateTime,proto3" json:"actual_end_date_time,omitempty"`
	StartDateTime                string                 `protobuf:"bytes,9,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	EndDateTime                  string                 `protobuf:"bytes,10,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty"`
	Duration                     int32                  `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
	TotalStudent                 int32                  `protobuf:"varint,12,opt,name=total_student,json=totalStudent,proto3" json:"total_student,omitempty"`
	RemainingServerTimeInSeconds int32                  `protobuf:"varint,13,opt,name=remaining_server_time_in_seconds,json=remainingServerTimeInSeconds,proto3" json:"remaining_server_time_in_seconds,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ExamInfo) Reset() {
	*x = ExamInfo{}
	mi := &file_exams_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamInfo) ProtoMessage() {}

func (x *ExamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamInfo.ProtoReflect.Descriptor instead.
func (*ExamInfo) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{17}
}

func (x *ExamInfo) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamInfo) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *ExamInfo) GetExamName() string {
	if x != nil {
		return x.ExamName
	}
	return ""
}

func (x *ExamInfo) GetExamSubject() string {
	if x != nil {
		return x.ExamSubject
	}
	return ""
}

func (x *ExamInfo) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *ExamInfo) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

func (x *ExamInfo) GetActualStartDateTime() string {
	if x != nil {
		return x.ActualStartDateTime
	}
	return ""
}

func (x *ExamInfo) GetActualEndDateTime() string {
	if x != nil {
		return x.ActualEndDateTime
	}
	return ""
}

func (x *ExamInfo) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *ExamInfo) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

func (x *ExamInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ExamInfo) GetTotalStudent() int32 {
	if x != nil {
		return x.TotalStudent
	}
	return 0
}

func (x *ExamInfo) GetRemainingServerTimeInSeconds() int32 {
	if x != nil {
		return x.RemainingServerTimeInSeconds
	}
	return 0
}

type StudentInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	StudentId               string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName             string                 `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	StudentEmail            string                 `protobuf:"bytes,3,opt,name=student_email,json=studentEmail,proto3" json:"student_email,omitempty"`
	StudentRollNo           string                 `protobuf:"bytes,4,opt,name=student_roll_no,json=studentRollNo,proto3" json:"student_roll_no,omitempty"`
	StudentGrade            string                 `protobuf:"bytes,5,opt,name=student_grade,json=studentGrade,proto3" json:"student_grade,omitempty"`
	StudentStatus           string                 `protobuf:"bytes,6,opt,name=student_status,json=studentStatus,proto3" json:"student_status,omitempty"`                                   // student_exam_participation.status -- active|inactive|submitted
	StudentJoinTime         string                 `protobuf:"bytes,7,opt,name=student_join_time,json=studentJoinTime,proto3" json:"student_join_time,omitempty"`                           // student_exam_participation.first_entered_at
	StudentLastActivityTime string                 `protobuf:"bytes,8,opt,name=student_last_activity_time,json=studentLastActivityTime,proto3" json:"student_last_activity_time,omitempty"` // student_exam_participation.last_activity_at
	CompletedAt             string                 `protobuf:"bytes,9,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`                                         // student_exam_participation.completed_at -- Submission Time
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *StudentInfo) Reset() {
	*x = StudentInfo{}
	mi := &file_exams_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentInfo) ProtoMessage() {}

func (x *StudentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentInfo.ProtoReflect.Descriptor instead.
func (*StudentInfo) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{18}
}

func (x *StudentInfo) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentInfo) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentInfo) GetStudentEmail() string {
	if x != nil {
		return x.StudentEmail
	}
	return ""
}

func (x *StudentInfo) GetStudentRollNo() string {
	if x != nil {
		return x.StudentRollNo
	}
	return ""
}

func (x *StudentInfo) GetStudentGrade() string {
	if x != nil {
		return x.StudentGrade
	}
	return ""
}

func (x *StudentInfo) GetStudentStatus() string {
	if x != nil {
		return x.StudentStatus
	}
	return ""
}

func (x *StudentInfo) GetStudentJoinTime() string {
	if x != nil {
		return x.StudentJoinTime
	}
	return ""
}

func (x *StudentInfo) GetStudentLastActivityTime() string {
	if x != nil {
		return x.StudentLastActivityTime
	}
	return ""
}

func (x *StudentInfo) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

type ExamAnalytics struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ExamId                 string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamName               string                 `protobuf:"bytes,2,opt,name=exam_name,json=examName,proto3" json:"exam_name,omitempty"`
	ExamSubject            string                 `protobuf:"bytes,3,opt,name=exam_subject,json=examSubject,proto3" json:"exam_subject,omitempty"`
	TotalMarks             int32                  `protobuf:"varint,4,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	TotalQuestions         int32                  `protobuf:"varint,5,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	TotalJoinedStudents    int32                  `protobuf:"varint,6,opt,name=total_joined_students,json=totalJoinedStudents,proto3" json:"total_joined_students,omitempty"`
	TotalSubmittedStudents int32                  `protobuf:"varint,7,opt,name=total_submitted_students,json=totalSubmittedStudents,proto3" json:"total_submitted_students,omitempty"`
	AverageScore           int32                  `protobuf:"varint,8,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
	CompletionRate         int32                  `protobuf:"varint,9,opt,name=completion_rate,json=completionRate,proto3" json:"completion_rate,omitempty"`
	AverageTime            int32                  `protobuf:"varint,10,opt,name=average_time,json=averageTime,proto3" json:"average_time,omitempty"`
	ExamType               string                 `protobuf:"bytes,11,opt,name=exam_type,json=examType,proto3" json:"exam_type,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExamAnalytics) Reset() {
	*x = ExamAnalytics{}
	mi := &file_exams_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamAnalytics) ProtoMessage() {}

func (x *ExamAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamAnalytics.ProtoReflect.Descriptor instead.
func (*ExamAnalytics) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{19}
}

func (x *ExamAnalytics) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamAnalytics) GetExamName() string {
	if x != nil {
		return x.ExamName
	}
	return ""
}

func (x *ExamAnalytics) GetExamSubject() string {
	if x != nil {
		return x.ExamSubject
	}
	return ""
}

func (x *ExamAnalytics) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *ExamAnalytics) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *ExamAnalytics) GetTotalJoinedStudents() int32 {
	if x != nil {
		return x.TotalJoinedStudents
	}
	return 0
}

func (x *ExamAnalytics) GetTotalSubmittedStudents() int32 {
	if x != nil {
		return x.TotalSubmittedStudents
	}
	return 0
}

func (x *ExamAnalytics) GetAverageScore() int32 {
	if x != nil {
		return x.AverageScore
	}
	return 0
}

func (x *ExamAnalytics) GetCompletionRate() int32 {
	if x != nil {
		return x.CompletionRate
	}
	return 0
}

func (x *ExamAnalytics) GetAverageTime() int32 {
	if x != nil {
		return x.AverageTime
	}
	return 0
}

func (x *ExamAnalytics) GetExamType() string {
	if x != nil {
		return x.ExamType
	}
	return ""
}

type StudentAnalytics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StudentId      string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName    string                 `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	StudentEmail   string                 `protobuf:"bytes,3,opt,name=student_email,json=studentEmail,proto3" json:"student_email,omitempty"`
	StudentRollNo  string                 `protobuf:"bytes,4,opt,name=student_roll_no,json=studentRollNo,proto3" json:"student_roll_no,omitempty"`
	StudentGrade   string                 `protobuf:"bytes,5,opt,name=student_grade,json=studentGrade,proto3" json:"student_grade,omitempty"`
	GradingStatus  string                 `protobuf:"bytes,6,opt,name=grading_status,json=gradingStatus,proto3" json:"grading_status,omitempty"`
	ObtainedScore  int32                  `protobuf:"varint,7,opt,name=obtained_score,json=obtainedScore,proto3" json:"obtained_score,omitempty"`
	SubmissionTime string                 `protobuf:"bytes,8,opt,name=submission_time,json=submissionTime,proto3" json:"submission_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StudentAnalytics) Reset() {
	*x = StudentAnalytics{}
	mi := &file_exams_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentAnalytics) ProtoMessage() {}

func (x *StudentAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentAnalytics.ProtoReflect.Descriptor instead.
func (*StudentAnalytics) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{20}
}

func (x *StudentAnalytics) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentAnalytics) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentAnalytics) GetStudentEmail() string {
	if x != nil {
		return x.StudentEmail
	}
	return ""
}

func (x *StudentAnalytics) GetStudentRollNo() string {
	if x != nil {
		return x.StudentRollNo
	}
	return ""
}

func (x *StudentAnalytics) GetStudentGrade() string {
	if x != nil {
		return x.StudentGrade
	}
	return ""
}

func (x *StudentAnalytics) GetGradingStatus() string {
	if x != nil {
		return x.GradingStatus
	}
	return ""
}

func (x *StudentAnalytics) GetObtainedScore() int32 {
	if x != nil {
		return x.ObtainedScore
	}
	return 0
}

func (x *StudentAnalytics) GetSubmissionTime() string {
	if x != nil {
		return x.SubmissionTime
	}
	return ""
}

// --- Messages: Create and schedule exam ---
type CreateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExamRequest) Reset() {
	*x = CreateExamRequest{}
	mi := &file_exams_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamRequest) ProtoMessage() {}

func (x *CreateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamRequest.ProtoReflect.Descriptor instead.
func (*CreateExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{21}
}

func (x *CreateExamRequest) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type CreateExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExamResponse) Reset() {
	*x = CreateExamResponse{}
	mi := &file_exams_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamResponse) ProtoMessage() {}

func (x *CreateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamResponse.ProtoReflect.Descriptor instead.
func (*CreateExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{22}
}

func (x *CreateExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamsRequest) Reset() {
	*x = GetExamsRequest{}
	mi := &file_exams_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamsRequest) ProtoMessage() {}

func (x *GetExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamsRequest.ProtoReflect.Descriptor instead.
func (*GetExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{23}
}

func (x *GetExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamsResponse) Reset() {
	*x = GetExamsResponse{}
	mi := &file_exams_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamsResponse) ProtoMessage() {}

func (x *GetExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamsResponse.ProtoReflect.Descriptor instead.
func (*GetExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{24}
}

func (x *GetExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

type UpdateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamRequest) Reset() {
	*x = UpdateExamRequest{}
	mi := &file_exams_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamRequest) ProtoMessage() {}

func (x *UpdateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamRequest.ProtoReflect.Descriptor instead.
func (*UpdateExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateExamRequest) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type UpdateExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamResponse) Reset() {
	*x = UpdateExamResponse{}
	mi := &file_exams_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamResponse) ProtoMessage() {}

func (x *UpdateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamResponse.ProtoReflect.Descriptor instead.
func (*UpdateExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamRequest) Reset() {
	*x = DeleteExamRequest{}
	mi := &file_exams_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamRequest) ProtoMessage() {}

func (x *DeleteExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *DeleteExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type DeleteExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamResponse) Reset() {
	*x = DeleteExamResponse{}
	mi := &file_exams_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamResponse) ProtoMessage() {}

func (x *DeleteExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamResponse.ProtoReflect.Descriptor instead.
func (*DeleteExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ScheduleExamRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ExamId                 string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ScheduledStartDateTime string                 `protobuf:"bytes,2,opt,name=scheduled_start_date_time,json=scheduledStartDateTime,proto3" json:"scheduled_start_date_time,omitempty"`
	CreatedBy              string                 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` //   on the DB change the exam mode to scheduled
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ScheduleExamRequest) Reset() {
	*x = ScheduleExamRequest{}
	mi := &file_exams_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExamRequest) ProtoMessage() {}

func (x *ScheduleExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExamRequest.ProtoReflect.Descriptor instead.
func (*ScheduleExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{29}
}

func (x *ScheduleExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ScheduleExamRequest) GetScheduledStartDateTime() string {
	if x != nil {
		return x.ScheduledStartDateTime
	}
	return ""
}

func (x *ScheduleExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ScheduleExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleExamResponse) Reset() {
	*x = ScheduleExamResponse{}
	mi := &file_exams_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExamResponse) ProtoMessage() {}

func (x *ScheduleExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExamResponse.ProtoReflect.Descriptor instead.
func (*ScheduleExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{30}
}

func (x *ScheduleExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamRequest) Reset() {
	*x = GetExamRequest{}
	mi := &file_exams_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamRequest) ProtoMessage() {}

func (x *GetExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamRequest.ProtoReflect.Descriptor instead.
func (*GetExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{31}
}

func (x *GetExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamResponse) Reset() {
	*x = GetExamResponse{}
	mi := &file_exams_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResponse) ProtoMessage() {}

func (x *GetExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResponse.ProtoReflect.Descriptor instead.
func (*GetExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{32}
}

func (x *GetExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type GetAllScheduledExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllScheduledExamsRequest) Reset() {
	*x = GetAllScheduledExamsRequest{}
	mi := &file_exams_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllScheduledExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllScheduledExamsRequest) ProtoMessage() {}

func (x *GetAllScheduledExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllScheduledExamsRequest.ProtoReflect.Descriptor instead.
func (*GetAllScheduledExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{33}
}

func (x *GetAllScheduledExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetAllScheduledExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllScheduledExamsResponse) Reset() {
	*x = GetAllScheduledExamsResponse{}
	mi := &file_exams_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllScheduledExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllScheduledExamsResponse) ProtoMessage() {}

func (x *GetAllScheduledExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllScheduledExamsResponse.ProtoReflect.Descriptor instead.
func (*GetAllScheduledExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{34}
}

func (x *GetAllScheduledExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

type GetAllLiveExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLiveExamsRequest) Reset() {
	*x = GetAllLiveExamsRequest{}
	mi := &file_exams_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLiveExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLiveExamsRequest) ProtoMessage() {}

func (x *GetAllLiveExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLiveExamsRequest.ProtoReflect.Descriptor instead.
func (*GetAllLiveExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{35}
}

func (x *GetAllLiveExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetAllLiveExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLiveExamsResponse) Reset() {
	*x = GetAllLiveExamsResponse{}
	mi := &file_exams_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLiveExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLiveExamsResponse) ProtoMessage() {}

func (x *GetAllLiveExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLiveExamsResponse.ProtoReflect.Descriptor instead.
func (*GetAllLiveExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{36}
}

func (x *GetAllLiveExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

// --- Messages: Start / End exam ---
type StartTimedExamManuallyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTimedExamManuallyRequest) Reset() {
	*x = StartTimedExamManuallyRequest{}
	mi := &file_exams_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTimedExamManuallyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimedExamManuallyRequest) ProtoMessage() {}

func (x *StartTimedExamManuallyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimedExamManuallyRequest.ProtoReflect.Descriptor instead.
func (*StartTimedExamManuallyRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{37}
}

func (x *StartTimedExamManuallyRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *StartTimedExamManuallyRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type StartTimedExamManuallyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTimedExamManuallyResponse) Reset() {
	*x = StartTimedExamManuallyResponse{}
	mi := &file_exams_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTimedExamManuallyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimedExamManuallyResponse) ProtoMessage() {}

func (x *StartTimedExamManuallyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimedExamManuallyResponse.ProtoReflect.Descriptor instead.
func (*StartTimedExamManuallyResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{38}
}

func (x *StartTimedExamManuallyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EndExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndExamRequest) Reset() {
	*x = EndExamRequest{}
	mi := &file_exams_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndExamRequest) ProtoMessage() {}

func (x *EndExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndExamRequest.ProtoReflect.Descriptor instead.
func (*EndExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{39}
}

func (x *EndExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *EndExamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type EndExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndExamResponse) Reset() {
	*x = EndExamResponse{}
	mi := &file_exams_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndExamResponse) ProtoMessage() {}

func (x *EndExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndExamResponse.ProtoReflect.Descriptor instead.
func (*EndExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{40}
}

func (x *EndExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// --- Messages: Live state & events ---
type GetExamLiveStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamLiveStateRequest) Reset() {
	*x = GetExamLiveStateRequest{}
	mi := &file_exams_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamLiveStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamLiveStateRequest) ProtoMessage() {}

func (x *GetExamLiveStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamLiveStateRequest.ProtoReflect.Descriptor instead.
func (*GetExamLiveStateRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{41}
}

func (x *GetExamLiveStateRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetExamLiveStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ExamStatus             `protobuf:"varint,1,opt,name=status,proto3,enum=exams.ExamStatus" json:"status,omitempty"`
	StartedAt     string                 `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndsAt        string                 `protobuf:"bytes,3,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	ServerTime    string                 `protobuf:"bytes,4,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamLiveStateResponse) Reset() {
	*x = GetExamLiveStateResponse{}
	mi := &file_exams_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamLiveStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamLiveStateResponse) ProtoMessage() {}

func (x *GetExamLiveStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamLiveStateResponse.ProtoReflect.Descriptor instead.
func (*GetExamLiveStateResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{42}
}

func (x *GetExamLiveStateResponse) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_UNKNOWN
}

func (x *GetExamLiveStateResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *GetExamLiveStateResponse) GetEndsAt() string {
	if x != nil {
		return x.EndsAt
	}
	return ""
}

func (x *GetExamLiveStateResponse) GetServerTime() string {
	if x != nil {
		return x.ServerTime
	}
	return ""
}

type StreamExamEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExamEventsRequest) Reset() {
	*x = StreamExamEventsRequest{}
	mi := &file_exams_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExamEventsRequest) ProtoMessage() {}

func (x *StreamExamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamExamEventsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{43}
}

func (x *StreamExamEventsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type ExamEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      ExamEvent_EventType    `protobuf:"varint,1,opt,name=type,proto3,enum=exams.ExamEvent_EventType" json:"type,omitempty"`
	Timestamp string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// for TIME_SYNC, payload.remaining_ms could be filled
	RemainingMs   int64 `protobuf:"varint,3,opt,name=remaining_ms,json=remainingMs,proto3" json:"remaining_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExamEvent) Reset() {
	*x = ExamEvent{}
	mi := &file_exams_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamEvent) ProtoMessage() {}

func (x *ExamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamEvent.ProtoReflect.Descriptor instead.
func (*ExamEvent) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{44}
}

func (x *ExamEvent) GetType() ExamEvent_EventType {
	if x != nil {
		return x.Type
	}
	return ExamEvent_EXAM_STARTED
}

func (x *ExamEvent) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ExamEvent) GetRemainingMs() int64 {
	if x != nil {
		return x.RemainingMs
	}
	return 0
}

type PingExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExamKey       string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingExamRequest) Reset() {
	*x = PingExamRequest{}
	mi := &file_exams_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingExamRequest) ProtoMessage() {}

func (x *PingExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingExamRequest.ProtoReflect.Descriptor instead.
func (*PingExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{45}
}

func (x *PingExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *PingExamRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PingExamRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

type PingExamResponse struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Success                      bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RemainingServerTimeInSeconds int32                  `protobuf:"varint,2,opt,name=remaining_server_time_in_seconds,json=remainingServerTimeInSeconds,proto3" json:"remaining_server_time_in_seconds,omitempty"`
	IsExamEnded                  bool                   `protobuf:"varint,3,opt,name=is_exam_ended,json=isExamEnded,proto3" json:"is_exam_ended,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PingExamResponse) Reset() {
	*x = PingExamResponse{}
	mi := &file_exams_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingExamResponse) ProtoMessage() {}

func (x *PingExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingExamResponse.ProtoReflect.Descriptor instead.
func (*PingExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{46}
}

func (x *PingExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PingExamResponse) GetRemainingServerTimeInSeconds() int32 {
	if x != nil {
		return x.RemainingServerTimeInSeconds
	}
	return 0
}

func (x *PingExamResponse) GetIsExamEnded() bool {
	if x != nil {
		return x.IsExamEnded
	}
	return false
}

// --- Messages: Student join & submission ---
type JoinExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamKey       string                 `protobuf:"bytes,1,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"` //user Id
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinExamRequest) Reset() {
	*x = JoinExamRequest{}
	mi := &file_exams_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinExamRequest) ProtoMessage() {}

func (x *JoinExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinExamRequest.ProtoReflect.Descriptor instead.
func (*JoinExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{47}
}

func (x *JoinExamRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *JoinExamRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type JoinExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinExamResponse) Reset() {
	*x = JoinExamResponse{}
	mi := &file_exams_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinExamResponse) ProtoMessage() {}

func (x *JoinExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinExamResponse.ProtoReflect.Descriptor instead.
func (*JoinExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{48}
}

func (x *JoinExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetJoinedExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJoinedExamsRequest) Reset() {
	*x = GetJoinedExamsRequest{}
	mi := &file_exams_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJoinedExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedExamsRequest) ProtoMessage() {}

func (x *GetJoinedExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedExamsRequest.ProtoReflect.Descriptor instead.
func (*GetJoinedExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{49}
}

func (x *GetJoinedExamsRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetJoinedExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJoinedExamsResponse) Reset() {
	*x = GetJoinedExamsResponse{}
	mi := &file_exams_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJoinedExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJoinedExamsResponse) ProtoMessage() {}

func (x *GetJoinedExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJoinedExamsResponse.ProtoReflect.Descriptor instead.
func (*GetJoinedExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{50}
}

func (x *GetJoinedExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

type EnterLiveExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamKey       string                 `protobuf:"bytes,1,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnterLiveExamRequest) Reset() {
	*x = EnterLiveExamRequest{}
	mi := &file_exams_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterLiveExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterLiveExamRequest) ProtoMessage() {}

func (x *EnterLiveExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterLiveExamRequest.ProtoReflect.Descriptor instead.
func (*EnterLiveExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{51}
}

func (x *EnterLiveExamRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *EnterLiveExamRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type EnterLiveExamResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ExamName             string                 `protobuf:"bytes,1,opt,name=exam_name,json=examName,proto3" json:"exam_name,omitempty"`
	ExamSubject          string                 `protobuf:"bytes,2,opt,name=exam_subject,json=examSubject,proto3" json:"exam_subject,omitempty"`
	TotalMarks           int32                  `protobuf:"varint,3,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	DurationMinutes      int32                  `protobuf:"varint,4,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	TimeRemainingSeconds int32                  `protobuf:"varint,5,opt,name=time_remaining_seconds,json=timeRemainingSeconds,proto3" json:"time_remaining_seconds,omitempty"`
	ActualStartDateTime  string                 `protobuf:"bytes,6,opt,name=actual_start_date_time,json=actualStartDateTime,proto3" json:"actual_start_date_time,omitempty"`
	ActualEndDateTime    string                 `protobuf:"bytes,7,opt,name=actual_end_date_time,json=actualEndDateTime,proto3" json:"actual_end_date_time,omitempty"`
	Questions            []*StudentQuestion     `protobuf:"bytes,8,rep,name=questions,proto3" json:"questions,omitempty"`
	StartDateTime        string                 `protobuf:"bytes,9,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	EndDateTime          string                 `protobuf:"bytes,10,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EnterLiveExamResponse) Reset() {
	*x = EnterLiveExamResponse{}
	mi := &file_exams_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnterLiveExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterLiveExamResponse) ProtoMessage() {}

func (x *EnterLiveExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterLiveExamResponse.ProtoReflect.Descriptor instead.
func (*EnterLiveExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{52}
}

func (x *EnterLiveExamResponse) GetExamName() string {
	if x != nil {
		return x.ExamName
	}
	return ""
}

func (x *EnterLiveExamResponse) GetExamSubject() string {
	if x != nil {
		return x.ExamSubject
	}
	return ""
}

func (x *EnterLiveExamResponse) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *EnterLiveExamResponse) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *EnterLiveExamResponse) GetTimeRemainingSeconds() int32 {
	if x != nil {
		return x.TimeRemainingSeconds
	}
	return 0
}

func (x *EnterLiveExamResponse) GetActualStartDateTime() string {
	if x != nil {
		return x.ActualStartDateTime
	}
	return ""
}

func (x *EnterLiveExamResponse) GetActualEndDateTime() string {
	if x != nil {
		return x.ActualEndDateTime
	}
	return ""
}

func (x *EnterLiveExamResponse) GetQuestions() []*StudentQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *EnterLiveExamResponse) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *EnterLiveExamResponse) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

type StudentAnswer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	QuestionId        string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	QuestionType      QuestionType           `protobuf:"varint,2,opt,name=question_type,json=questionType,proto3,enum=exams.QuestionType" json:"question_type,omitempty"`
	SelectedOptionIds []string               `protobuf:"bytes,3,rep,name=selected_option_ids,json=selectedOptionIds,proto3" json:"selected_option_ids,omitempty"`
	BlankAnswers      []string               `protobuf:"bytes,4,rep,name=blank_answers,json=blankAnswers,proto3" json:"blank_answers,omitempty"`
	AnswerText        string                 `protobuf:"bytes,5,opt,name=answer_text,json=answerText,proto3" json:"answer_text,omitempty"`
	TrueFalseAnswer   bool                   `protobuf:"varint,6,opt,name=true_false_answer,json=trueFalseAnswer,proto3" json:"true_false_answer,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StudentAnswer) Reset() {
	*x = StudentAnswer{}
	mi := &file_exams_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentAnswer) ProtoMessage() {}

func (x *StudentAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentAnswer.ProtoReflect.Descriptor instead.
func (*StudentAnswer) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{53}
}

func (x *StudentAnswer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *StudentAnswer) GetQuestionType() QuestionType {
	if x != nil {
		return x.QuestionType
	}
	return QuestionType_QUESTION_TYPE_UNSPECIFIED
}

func (x *StudentAnswer) GetSelectedOptionIds() []string {
	if x != nil {
		return x.SelectedOptionIds
	}
	return nil
}

func (x *StudentAnswer) GetBlankAnswers() []string {
	if x != nil {
		return x.BlankAnswers
	}
	return nil
}

func (x *StudentAnswer) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *StudentAnswer) GetTrueFalseAnswer() bool {
	if x != nil {
		return x.TrueFalseAnswer
	}
	return false
}

type SubmitAnswerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*StudentAnswer       `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamKey       string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	StudentId     string                 `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_exams_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{54}
}

func (x *SubmitAnswerRequest) GetAnswers() []*StudentAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *SubmitAnswerRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *SubmitAnswerRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_exams_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{55}
}

func (x *SubmitAnswerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type SubmitExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []*StudentAnswer       `protobuf:"bytes,1,rep,name=answers,proto3" json:"answers,omitempty"`
	ExamId        string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamKey       string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	StudentId     string                 `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamRequest) Reset() {
	*x = SubmitExamRequest{}
	mi := &file_exams_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamRequest) ProtoMessage() {}

func (x *SubmitExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamRequest.ProtoReflect.Descriptor instead.
func (*SubmitExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{56}
}

func (x *SubmitExamRequest) GetAnswers() []*StudentAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *SubmitExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *SubmitExamRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *SubmitExamRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type SubmitExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamResponse) Reset() {
	*x = SubmitExamResponse{}
	mi := &file_exams_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResponse) ProtoMessage() {}

func (x *SubmitExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResponse.ProtoReflect.Descriptor instead.
func (*SubmitExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{57}
}

func (x *SubmitExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type MonitorExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ExamKey       string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitorExamRequest) Reset() {
	*x = MonitorExamRequest{}
	mi := &file_exams_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorExamRequest) ProtoMessage() {}

func (x *MonitorExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorExamRequest.ProtoReflect.Descriptor instead.
func (*MonitorExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{58}
}

func (x *MonitorExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *MonitorExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *MonitorExamRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

type MonitorExamResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Students         []*StudentInfo         `protobuf:"bytes,1,rep,name=students,proto3" json:"students,omitempty"`
	ExamInfo         *ExamInfo              `protobuf:"bytes,2,opt,name=exam_info,json=examInfo,proto3" json:"exam_info,omitempty"`
	IsStudentsJoined bool                   `protobuf:"varint,3,opt,name=is_students_joined,json=isStudentsJoined,proto3" json:"is_students_joined,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MonitorExamResponse) Reset() {
	*x = MonitorExamResponse{}
	mi := &file_exams_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitorExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorExamResponse) ProtoMessage() {}

func (x *MonitorExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorExamResponse.ProtoReflect.Descriptor instead.
func (*MonitorExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{59}
}

func (x *MonitorExamResponse) GetStudents() []*StudentInfo {
	if x != nil {
		return x.Students
	}
	return nil
}

func (x *MonitorExamResponse) GetExamInfo() *ExamInfo {
	if x != nil {
		return x.ExamInfo
	}
	return nil
}

func (x *MonitorExamResponse) GetIsStudentsJoined() bool {
	if x != nil {
		return x.IsStudentsJoined
	}
	return false
}

type PingStudentInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ExamKey       string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingStudentInfoRequest) Reset() {
	*x = PingStudentInfoRequest{}
	mi := &file_exams_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingStudentInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingStudentInfoRequest) ProtoMessage() {}

func (x *PingStudentInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingStudentInfoRequest.ProtoReflect.Descriptor instead.
func (*PingStudentInfoRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{60}
}

func (x *PingStudentInfoRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *PingStudentInfoRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PingStudentInfoRequest) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

type PingStudentInfoResponse struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Students                     []*StudentInfo         `protobuf:"bytes,1,rep,name=students,proto3" json:"students,omitempty"`
	IsStudentsJoined             bool                   `protobuf:"varint,2,opt,name=is_students_joined,json=isStudentsJoined,proto3" json:"is_students_joined,omitempty"`
	RemainingServerTimeInSeconds int32                  `protobuf:"varint,3,opt,name=remaining_server_time_in_seconds,json=remainingServerTimeInSeconds,proto3" json:"remaining_server_time_in_seconds,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *PingStudentInfoResponse) Reset() {
	*x = PingStudentInfoResponse{}
	mi := &file_exams_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingStudentInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingStudentInfoResponse) ProtoMessage() {}

func (x *PingStudentInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingStudentInfoResponse.ProtoReflect.Descriptor instead.
func (*PingStudentInfoResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{61}
}

func (x *PingStudentInfoResponse) GetStudents() []*StudentInfo {
	if x != nil {
		return x.Students
	}
	return nil
}

func (x *PingStudentInfoResponse) GetIsStudentsJoined() bool {
	if x != nil {
		return x.IsStudentsJoined
	}
	return false
}

func (x *PingStudentInfoResponse) GetRemainingServerTimeInSeconds() int32 {
	if x != nil {
		return x.RemainingServerTimeInSeconds
	}
	return 0
}

type ExamAnalyticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExamAnalyticsRequest) Reset() {
	*x = ExamAnalyticsRequest{}
	mi := &file_exams_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamAnalyticsRequest) ProtoMessage() {}

func (x *ExamAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*ExamAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{62}
}

func (x *ExamAnalyticsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamAnalyticsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ExamAnalyticsResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ExamAnalytics    *ExamAnalytics         `protobuf:"bytes,1,opt,name=exam_analytics,json=examAnalytics,proto3" json:"exam_analytics,omitempty"`
	StudentAnalytics []*StudentAnalytics    `protobuf:"bytes,2,rep,name=student_analytics,json=studentAnalytics,proto3" json:"student_analytics,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExamAnalyticsResponse) Reset() {
	*x = ExamAnalyticsResponse{}
	mi := &file_exams_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamAnalyticsResponse) ProtoMessage() {}

func (x *ExamAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*ExamAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{63}
}

func (x *ExamAnalyticsResponse) GetExamAnalytics() *ExamAnalytics {
	if x != nil {
		return x.ExamAnalytics
	}
	return nil
}

func (x *ExamAnalyticsResponse) GetStudentAnalytics() []*StudentAnalytics {
	if x != nil {
		return x.StudentAnalytics
	}
	return nil
}

// --- Messages: Results ---
type PublishResultsRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ExamId string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	// optionally a list of student_ids to publish, or all
	StudentIds    []string `protobuf:"bytes,2,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResultsRequest) Reset() {
	*x = PublishResultsRequest{}
	mi := &file_exams_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResultsRequest) ProtoMessage() {}

func (x *PublishResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResultsRequest.ProtoReflect.Descriptor instead.
func (*PublishResultsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{64}
}

func (x *PublishResultsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *PublishResultsRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

type PublishResultsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishedCount int32                  `protobuf:"varint,1,opt,name=published_count,json=publishedCount,proto3" json:"published_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishResultsResponse) Reset() {
	*x = PublishResultsResponse{}
	mi := &file_exams_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResultsResponse) ProtoMessage() {}

func (x *PublishResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResultsResponse.ProtoReflect.Descriptor instead.
func (*PublishResultsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{65}
}

func (x *PublishResultsResponse) GetPublishedCount() int32 {
	if x != nil {
		return x.PublishedCount
	}
	return 0
}

type GetResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	mi := &file_exams_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{66}
}

func (x *GetResultRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetResultRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Score         float64                `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Details       []*QuestionResult      `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	mi := &file_exams_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{67}
}

func (x *GetResultResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetResultResponse) GetDetails() []*QuestionResult {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuestionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Feedback      string                 `protobuf:"bytes,3,opt,name=feedback,proto3" json:"feedback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionResult) Reset() {
	*x = QuestionResult{}
	mi := &file_exams_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResult) ProtoMessage() {}

func (x *QuestionResult) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResult.ProtoReflect.Descriptor instead.
func (*QuestionResult) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{68}
}

func (x *QuestionResult) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuestionResult) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

var File_exams_proto protoreflect.FileDescriptor

var file_exams_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x04, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x66, 0x5f, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x66, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6d, 0x63, 0x71, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d,
	0x63, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x66, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x66,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x19, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x63, 0x71, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x6d,
	0x63, 0x71, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x62, 0x6f, 0x78, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x69,
	0x76, 0x65, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x30, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x69, 0x0a, 0x09, 0x42, 0x6c,
	0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x16, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x14, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x38,
	0x0a, 0x0d, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x65, 0x78, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x17, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x34,
	0x0a, 0x18, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x37, 0x0a, 0x1b, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0xd8, 0x07, 0x0a, 0x04, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x65, 0x72, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x55, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x65, 0x0a, 0x05, 0x42, 0x6c, 0x61, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xff, 0x01,
	0x0a, 0x0f, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x42,
	0x6c, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x22,
	0xf7, 0x03, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x12, 0x46, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xf4, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xae, 0x03, 0x0a, 0x0d, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x61, 0x6d,
	0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xbd, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x6c, 0x6c, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x62, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x34, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73,
	0x22, 0x34, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x30,
	0x0a, 0x14, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x32, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x3c,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x41, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45,
	0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22,
	0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22,
	0x3a, 0x0a, 0x1e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x42, 0x0a, 0x0e, 0x45,
	0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2b, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64,
	0x22, 0x9e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x32, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x5e, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x46, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x4b, 0x0a,
	0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x10, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x3b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22, 0x50, 0x0a,
	0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xc1, 0x03, 0x0a, 0x15, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x61, 0x6d, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x6e, 0x6b, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x30, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x96, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x67, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x16, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x14, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0e, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x65, 0x78,
	0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x22, 0x51, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x63, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x2a, 0x23, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x8c, 0x01, 0x0a, 0x0a, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x08, 0x2a, 0x58, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x43, 0x51, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x52, 0x55, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x4e, 0x4b, 0x53, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x05, 0x32, 0xd1, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73,
	0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x24,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x15,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x6e,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0d, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1b,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1e, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x13, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x50,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e,
	0x45, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x76,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x04, 0x5a, 0x02,
	0x2f, 0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_exams_proto_rawDescOnce sync.Once
	file_exams_proto_rawDescData []byte
)

func file_exams_proto_rawDescGZIP() []byte {
	file_exams_proto_rawDescOnce.Do(func() {
		file_exams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exams_proto_rawDesc), len(file_exams_proto_rawDesc)))
	})
	return file_exams_proto_rawDescData
}

var file_exams_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_exams_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_exams_proto_goTypes = []any{
	(ExamType)(0),                                  // 0: exams.ExamType
	(ExamStatus)(0),                                // 1: exams.ExamStatus
	(StartMode)(0),                                 // 2: exams.StartMode
	(QuestionType)(0),                              // 3: exams.QuestionType
	(ExamEvent_EventType)(0),                       // 4: exams.ExamEvent.EventType
	(*SubmitGradingRequest)(nil),                   // 5: exams.SubmitGradingRequest
	(*SubmitGradingResponse)(nil),                  // 6: exams.SubmitGradingResponse
	(*QuestionWithAnswer)(nil),                     // 7: exams.QuestionWithAnswer
	(*OptionItem)(nil),                             // 8: exams.OptionItem
	(*BlankItem)(nil),                              // 9: exams.BlankItem
	(*ExamMetadata)(nil),                           // 10: exams.ExamMetadata
	(*StudentMetadata)(nil),                        // 11: exams.StudentMetadata
	(*GetQuestionsWithStudentAnswersResponse)(nil), // 12: exams.GetQuestionsWithStudentAnswersResponse
	(*GetQuestionsWithStudentAnswersRequest)(nil),  // 13: exams.GetQuestionsWithStudentAnswersRequest
	(*SaveStudentScoreRequest)(nil),                // 14: exams.SaveStudentScoreRequest
	(*SaveStudentScoreResponse)(nil),               // 15: exams.SaveStudentScoreResponse
	(*SaveStudentFeedbackRequest)(nil),             // 16: exams.SaveStudentFeedbackRequest
	(*SaveStudentFeedbackResponse)(nil),            // 17: exams.SaveStudentFeedbackResponse
	(*Exam)(nil),                                   // 18: exams.Exam
	(*QuestionOption)(nil),                         // 19: exams.QuestionOption
	(*Blank)(nil),                                  // 20: exams.Blank
	(*StudentQuestion)(nil),                        // 21: exams.StudentQuestion
	(*ExamInfo)(nil),                               // 22: exams.ExamInfo
	(*StudentInfo)(nil),                            // 23: exams.StudentInfo
	(*ExamAnalytics)(nil),                          // 24: exams.ExamAnalytics
	(*StudentAnalytics)(nil),                       // 25: exams.StudentAnalytics
	(*CreateExamRequest)(nil),                      // 26: exams.CreateExamRequest
	(*CreateExamResponse)(nil),                     // 27: exams.CreateExamResponse
	(*GetExamsRequest)(nil),                        // 28: exams.GetExamsRequest
	(*GetExamsResponse)(nil),                       // 29: exams.GetExamsResponse
	(*UpdateExamRequest)(nil),                      // 30: exams.UpdateExamRequest
	(*UpdateExamResponse)(nil),                     // 31: exams.UpdateExamResponse
	(*DeleteExamRequest)(nil),                      // 32: exams.DeleteExamRequest
	(*DeleteExamResponse)(nil),                     // 33: exams.DeleteExamResponse
	(*ScheduleExamRequest)(nil),                    // 34: exams.ScheduleExamRequest
	(*ScheduleExamResponse)(nil),                   // 35: exams.ScheduleExamResponse
	(*GetExamRequest)(nil),                         // 36: exams.GetExamRequest
	(*GetExamResponse)(nil),                        // 37: exams.GetExamResponse
	(*GetAllScheduledExamsRequest)(nil),            // 38: exams.GetAllScheduledExamsRequest
	(*GetAllScheduledExamsResponse)(nil),           // 39: exams.GetAllScheduledExamsResponse
	(*GetAllLiveExamsRequest)(nil),                 // 40: exams.GetAllLiveExamsRequest
	(*GetAllLiveExamsResponse)(nil),                // 41: exams.GetAllLiveExamsResponse
	(*StartTimedExamManuallyRequest)(nil),          // 42: exams.StartTimedExamManuallyRequest
	(*StartTimedExamManuallyResponse)(nil),         // 43: exams.StartTimedExamManuallyResponse
	(*EndExamRequest)(nil),                         // 44: exams.EndExamRequest
	(*EndExamResponse)(nil),                        // 45: exams.EndExamResponse
	(*GetExamLiveStateRequest)(nil),                // 46: exams.GetExamLiveStateRequest
	(*GetExamLiveStateResponse)(nil),               // 47: exams.GetExamLiveStateResponse
	(*StreamExamEventsRequest)(nil),                // 48: exams.StreamExamEventsRequest
	(*ExamEvent)(nil),                              // 49: exams.ExamEvent
	(*PingExamRequest)(nil),                        // 50: exams.PingExamRequest
	(*PingExamResponse)(nil),                       // 51: exams.PingExamResponse
	(*JoinExamRequest)(nil),                        // 52: exams.JoinExamRequest
	(*JoinExamResponse)(nil),                       // 53: exams.JoinExamResponse
	(*GetJoinedExamsRequest)(nil),                  // 54: exams.GetJoinedExamsRequest
	(*GetJoinedExamsResponse)(nil),                 // 55: exams.GetJoinedExamsResponse
	(*EnterLiveExamRequest)(nil),                   // 56: exams.EnterLiveExamRequest
	(*EnterLiveExamResponse)(nil),                  // 57: exams.EnterLiveExamResponse
	(*StudentAnswer)(nil),                          // 58: exams.StudentAnswer
	(*SubmitAnswerRequest)(nil),                    // 59: exams.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),                   // 60: exams.SubmitAnswerResponse
	(*SubmitExamRequest)(nil),                      // 61: exams.SubmitExamRequest
	(*SubmitExamResponse)(nil),                     // 62: exams.SubmitExamResponse
	(*MonitorExamRequest)(nil),                     // 63: exams.MonitorExamRequest
	(*MonitorExamResponse)(nil),                    // 64: exams.MonitorExamResponse
	(*PingStudentInfoRequest)(nil),                 // 65: exams.PingStudentInfoRequest
	(*PingStudentInfoResponse)(nil),                // 66: exams.PingStudentInfoResponse
	(*ExamAnalyticsRequest)(nil),                   // 67: exams.ExamAnalyticsRequest
	(*ExamAnalyticsResponse)(nil),                  // 68: exams.ExamAnalyticsResponse
	(*PublishResultsRequest)(nil),                  // 69: exams.PublishResultsRequest
	(*PublishResultsResponse)(nil),                 // 70: exams.PublishResultsResponse
	(*GetResultRequest)(nil),                       // 71: exams.GetResultRequest
	(*GetResultResponse)(nil),                      // 72: exams.GetResultResponse
	(*QuestionResult)(nil),                         // 73: exams.QuestionResult
}
var file_exams_proto_depIdxs = []int32{
	8,  // 0: exams.QuestionWithAnswer.options:type_name -> exams.OptionItem
	9,  // 1: exams.QuestionWithAnswer.blanks:type_name -> exams.BlankItem
	7,  // 2: exams.GetQuestionsWithStudentAnswersResponse.questions_with_answers:type_name -> exams.QuestionWithAnswer
	10, // 3: exams.GetQuestionsWithStudentAnswersResponse.exam_metadata:type_name -> exams.ExamMetadata
	11, // 4: exams.GetQuestionsWithStudentAnswersResponse.student_metadata:type_name -> exams.StudentMetadata
	0,  // 5: exams.Exam.exam_type:type_name -> exams.ExamType
	1,  // 6: exams.Exam.status:type_name -> exams.ExamStatus
	2,  // 7: exams.Exam.start_mode:type_name -> exams.StartMode
	3,  // 8: exams.StudentQuestion.type:type_name -> exams.QuestionType
	19, // 9: exams.StudentQuestion.options:type_name -> exams.QuestionOption
	20, // 10: exams.StudentQuestion.blanks:type_name -> exams.Blank
	18, // 11: exams.CreateExamRequest.exam:type_name -> exams.Exam
	18, // 12: exams.GetExamsResponse.exams:type_name -> exams.Exam
	18, // 13: exams.UpdateExamRequest.exam:type_name -> exams.Exam
	18, // 14: exams.GetExamResponse.exam:type_name -> exams.Exam
	18, // 15: exams.GetAllScheduledExamsResponse.exams:type_name -> exams.Exam
	18, // 16: exams.GetAllLiveExamsResponse.exams:type_name -> exams.Exam
	1,  // 17: exams.GetExamLiveStateResponse.status:type_name -> exams.ExamStatus
	4,  // 18: exams.ExamEvent.type:type_name -> exams.ExamEvent.EventType
	18, // 19: exams.GetJoinedExamsResponse.exams:type_name -> exams.Exam
	21, // 20: exams.EnterLiveExamResponse.questions:type_name -> exams.StudentQuestion
	3,  // 21: exams.StudentAnswer.question_type:type_name -> exams.QuestionType
	58, // 22: exams.SubmitAnswerRequest.answers:type_name -> exams.StudentAnswer
	58, // 23: exams.SubmitExamRequest.answers:type_name -> exams.StudentAnswer
	23, // 24: exams.MonitorExamResponse.students:type_name -> exams.StudentInfo
	22, // 25: exams.MonitorExamResponse.exam_info:type_name -> exams.ExamInfo
	23, // 26: exams.PingStudentInfoResponse.students:type_name -> exams.StudentInfo
	24, // 27: exams.ExamAnalyticsResponse.exam_analytics:type_name -> exams.ExamAnalytics
	25, // 28: exams.ExamAnalyticsResponse.student_analytics:type_name -> exams.StudentAnalytics
	73, // 29: exams.GetResultResponse.details:type_name -> exams.QuestionResult
	26, // 30: exams.ExamService.CreateExam:input_type -> exams.CreateExamRequest
	28, // 31: exams.ExamService.GetExams:input_type -> exams.GetExamsRequest
	38, // 32: exams.ExamService.GetAllScheduledExams:input_type -> exams.GetAllScheduledExamsRequest
	40, // 33: exams.ExamService.GetAllLiveExams:input_type -> exams.GetAllLiveExamsRequest
	36, // 34: exams.ExamService.GetExam:input_type -> exams.GetExamRequest
	30, // 35: exams.ExamService.UpdateExam:input_type -> exams.UpdateExamRequest
	32, // 36: exams.ExamService.DeleteExam:input_type -> exams.DeleteExamRequest
	34, // 37: exams.ExamService.ScheduleExam:input_type -> exams.ScheduleExamRequest
	42, // 38: exams.ExamService.StartTimedExamManually:input_type -> exams.StartTimedExamManuallyRequest
	63, // 39: exams.ExamService.MonitorExam:input_type -> exams.MonitorExamRequest
	65, // 40: exams.ExamService.PingStudentInfo:input_type -> exams.PingStudentInfoRequest
	44, // 41: exams.ExamService.EndExam:input_type -> exams.EndExamRequest
	67, // 42: exams.ExamService.ExamAnalytics:input_type -> exams.ExamAnalyticsRequest
	13, // 43: exams.ExamService.GetQuestionsWithStudentAnswers:input_type -> exams.GetQuestionsWithStudentAnswersRequest
	14, // 44: exams.ExamService.SaveStudentScore:input_type -> exams.SaveStudentScoreRequest
	16, // 45: exams.ExamService.SaveStudentFeedback:input_type -> exams.SaveStudentFeedbackRequest
	5,  // 46: exams.ExamService.SubmitGrading:input_type -> exams.SubmitGradingRequest
	69, // 47: exams.ExamService.PublishResults:input_type -> exams.PublishResultsRequest
	46, // 48: exams.ExamService.GetExamLiveState:input_type -> exams.GetExamLiveStateRequest
	50, // 49: exams.ExamService.PingExam:input_type -> exams.PingExamRequest
	52, // 50: exams.ExamService.JoinExam:input_type -> exams.JoinExamRequest
	54, // 51: exams.ExamService.GetJoinedExams:input_type -> exams.GetJoinedExamsRequest
	56, // 52: exams.ExamService.EnterLiveExam:input_type -> exams.EnterLiveExamRequest
	59, // 53: exams.ExamService.SubmitAnswer:input_type -> exams.SubmitAnswerRequest
	61, // 54: exams.ExamService.SubmitExam:input_type -> exams.SubmitExamRequest
	71, // 55: exams.ExamService.GetResult:input_type -> exams.GetResultRequest
	27, // 56: exams.ExamService.CreateExam:output_type -> exams.CreateExamResponse
	29, // 57: exams.ExamService.GetExams:output_type -> exams.GetExamsResponse
	39, // 58: exams.ExamService.GetAllScheduledExams:output_type -> exams.GetAllScheduledExamsResponse
	41, // 59: exams.ExamService.GetAllLiveExams:output_type -> exams.GetAllLiveExamsResponse
	37, // 60: exams.ExamService.GetExam:output_type -> exams.GetExamResponse
	31, // 61: exams.ExamService.UpdateExam:output_type -> exams.UpdateExamResponse
	33, // 62: exams.ExamService.DeleteExam:output_type -> exams.DeleteExamResponse
	35, // 63: exams.ExamService.ScheduleExam:output_type -> exams.ScheduleExamResponse
	43, // 64: exams.ExamService.StartTimedExamManually:output_type -> exams.StartTimedExamManuallyResponse
	64, // 65: exams.ExamService.MonitorExam:output_type -> exams.MonitorExamResponse
	66, // 66: exams.ExamService.PingStudentInfo:output_type -> exams.PingStudentInfoResponse
	45, // 67: exams.ExamService.EndExam:output_type -> exams.EndExamResponse
	68, // 68: exams.ExamService.ExamAnalytics:output_type -> exams.ExamAnalyticsResponse
	12, // 69: exams.ExamService.GetQuestionsWithStudentAnswers:output_type -> exams.GetQuestionsWithStudentAnswersResponse
	15, // 70: exams.ExamService.SaveStudentScore:output_type -> exams.SaveStudentScoreResponse
	17, // 71: exams.ExamService.SaveStudentFeedback:output_type -> exams.SaveStudentFeedbackResponse
	6,  // 72: exams.ExamService.SubmitGrading:output_type -> exams.SubmitGradingResponse
	70, // 73: exams.ExamService.PublishResults:output_type -> exams.PublishResultsResponse
	47, // 74: exams.ExamService.GetExamLiveState:output_type -> exams.GetExamLiveStateResponse
	51, // 75: exams.ExamService.PingExam:output_type -> exams.PingExamResponse
	53, // 76: exams.ExamService.JoinExam:output_type -> exams.JoinExamResponse
	55, // 77: exams.ExamService.GetJoinedExams:output_type -> exams.GetJoinedExamsResponse
	57, // 78: exams.ExamService.EnterLiveExam:output_type -> exams.EnterLiveExamResponse
	60, // 79: exams.ExamService.SubmitAnswer:output_type -> exams.SubmitAnswerResponse
	62, // 80: exams.ExamService.SubmitExam:output_type -> exams.SubmitExamResponse
	72, // 81: exams.ExamService.GetResult:output_type -> exams.GetResultResponse
	56, // [56:82] is the sub-list for method output_type
	30, // [30:56] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_exams_proto_init() }
func file_exams_proto_init() {
	if File_exams_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exams_proto_rawDesc), len(file_exams_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exams_proto_goTypes,
		DependencyIndexes: file_exams_proto_depIdxs,
		EnumInfos:         file_exams_proto_enumTypes,
		MessageInfos:      file_exams_proto_msgTypes,
	}.Build()
	File_exams_proto = out.File
	file_exams_proto_goTypes = nil
	file_exams_proto_depIdxs = nil
}
