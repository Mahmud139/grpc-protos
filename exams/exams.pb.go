// syntax = "proto3";

// package exams;

// option go_package = "/exams";

// // ENUMS
// enum AssignmentStatus {
//   ASSIGNMENT_STATUS_UNSPECIFIED = 0;
//   ASSIGNED = 1;
//   IN_PROGRESS = 2;
//   SUBMITTED = 3;
//   GRADED = 4;
// }

// // MESSAGES
// message Exam {
//   string id = 1;
//   string title = 2;
//   string description = 3;
//   repeated string question_bank_ids = 4;
//   string start_time = 5;
//   string end_time = 6;
//   int32 duration_minutes = 7;
//   bool allow_late_submission = 8;
//   string created_by = 9;
//   string created_at = 10;
// }

// message ExamAssignment {
//   string exam_id = 1;
//   string student_id = 2;
//   AssignmentStatus status = 3;
//   string submitted_at = 4;
//   string graded_at = 5;
// }

// message ExamQuestion {
//   string id = 1;
//   string exam_id = 2;
//   string question_id = 3; // from question_bank
// }

// // Used in answer submission
// message StudentAnswer {
//   string id = 1;
//   string exam_id = 2;
//   string exam_question_id = 3;
//   string student_id = 4;
//   repeated string selected_option_ids = 5;
//   repeated string blank_answers = 6;
//   string text_answer = 7;
//   bool is_marked = 8;
//   bool is_correct = 9;
//   int32 score = 10;
//   string marked_at = 11;
// }

// // REQUESTS / RESPONSES
// message CreateExamRequest {
//   Exam exam = 1;
// }

// message CreateExamResponse {
//   string id = 1;
// }

// message AssignStudentsRequest {
//   string exam_id = 1;
//   repeated string student_ids = 2;
// }

// message SubmitAnswerRequest {
//   StudentAnswer answer = 1;
// }

// message SubmitAnswerResponse {}

// message GetExamAssignmentsRequest {
//   string exam_id = 1;
// }

// message GetExamAssignmentsResponse {
//   repeated ExamAssignment assignments = 1;
// }

// message GetStudentAnswersRequest {
//   string exam_id = 1;
//   string student_id = 2;
// }

// message GetStudentAnswersResponse {
//   repeated StudentAnswer answers = 1;
// }

// // SERVICE
// service ExamManagementService {
//   rpc CreateExam(CreateExamRequest) returns (CreateExamResponse);
// //   rpc AssignStudents(AssignStudentsRequest) returns (google.protobuf.Empty);
//   rpc SubmitAnswer(SubmitAnswerRequest) returns (SubmitAnswerResponse);
//   rpc GetExamAssignments(GetExamAssignmentsRequest) returns (GetExamAssignmentsResponse);
//   rpc GetStudentAnswers(GetStudentAnswersRequest) returns (GetStudentAnswersResponse);
// }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.27.1
// source: exams.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --- Config types ---
type ExamType int32

const (
	ExamType_TIMED    ExamType = 0
	ExamType_DEADLINE ExamType = 1
)

// Enum value maps for ExamType.
var (
	ExamType_name = map[int32]string{
		0: "TIMED",
		1: "DEADLINE",
	}
	ExamType_value = map[string]int32{
		"TIMED":    0,
		"DEADLINE": 1,
	}
)

func (x ExamType) Enum() *ExamType {
	p := new(ExamType)
	*p = x
	return p
}

func (x ExamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamType) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[0].Descriptor()
}

func (ExamType) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[0]
}

func (x ExamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamType.Descriptor instead.
func (ExamType) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{0}
}

// --- Status enum ---
type ExamStatus int32

const (
	ExamStatus_UNKNOWN     ExamStatus = 0
	ExamStatus_SCHEDULED   ExamStatus = 1
	ExamStatus_LIVE        ExamStatus = 2
	ExamStatus_COMPLETED   ExamStatus = 3
	ExamStatus_GRADED      ExamStatus = 4
	ExamStatus_PUBLISHED   ExamStatus = 5
	ExamStatus_UNSCHEDULED ExamStatus = 6
)

// Enum value maps for ExamStatus.
var (
	ExamStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SCHEDULED",
		2: "LIVE",
		3: "COMPLETED",
		4: "GRADED",
		5: "PUBLISHED",
		6: "UNSCHEDULED",
	}
	ExamStatus_value = map[string]int32{
		"UNKNOWN":     0,
		"SCHEDULED":   1,
		"LIVE":        2,
		"COMPLETED":   3,
		"GRADED":      4,
		"PUBLISHED":   5,
		"UNSCHEDULED": 6,
	}
)

func (x ExamStatus) Enum() *ExamStatus {
	p := new(ExamStatus)
	*p = x
	return p
}

func (x ExamStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[1].Descriptor()
}

func (ExamStatus) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[1]
}

func (x ExamStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamStatus.Descriptor instead.
func (ExamStatus) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{1}
}

type StartMode int32

const (
	StartMode_START_MODE_UNSPECIFIED StartMode = 0
	StartMode_START_MODE_SCHEDULED   StartMode = 1
	StartMode_START_MODE_MANUAL      StartMode = 2
)

// Enum value maps for StartMode.
var (
	StartMode_name = map[int32]string{
		0: "START_MODE_UNSPECIFIED",
		1: "START_MODE_SCHEDULED",
		2: "START_MODE_MANUAL",
	}
	StartMode_value = map[string]int32{
		"START_MODE_UNSPECIFIED": 0,
		"START_MODE_SCHEDULED":   1,
		"START_MODE_MANUAL":      2,
	}
)

func (x StartMode) Enum() *StartMode {
	p := new(StartMode)
	*p = x
	return p
}

func (x StartMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartMode) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[2].Descriptor()
}

func (StartMode) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[2]
}

func (x StartMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartMode.Descriptor instead.
func (StartMode) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{2}
}

type ExamEvent_EventType int32

const (
	ExamEvent_EXAM_STARTED ExamEvent_EventType = 0
	ExamEvent_TIME_SYNC    ExamEvent_EventType = 1
	ExamEvent_EXAM_ENDED   ExamEvent_EventType = 2
)

// Enum value maps for ExamEvent_EventType.
var (
	ExamEvent_EventType_name = map[int32]string{
		0: "EXAM_STARTED",
		1: "TIME_SYNC",
		2: "EXAM_ENDED",
	}
	ExamEvent_EventType_value = map[string]int32{
		"EXAM_STARTED": 0,
		"TIME_SYNC":    1,
		"EXAM_ENDED":   2,
	}
)

func (x ExamEvent_EventType) Enum() *ExamEvent_EventType {
	p := new(ExamEvent_EventType)
	*p = x
	return p
}

func (x ExamEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_exams_proto_enumTypes[3].Descriptor()
}

func (ExamEvent_EventType) Type() protoreflect.EnumType {
	return &file_exams_proto_enumTypes[3]
}

func (x ExamEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamEvent_EventType.Descriptor instead.
func (ExamEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{24, 0}
}

type Exam struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy           string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ExamId              string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ExamKey             string                 `protobuf:"bytes,3,opt,name=exam_key,json=examKey,proto3" json:"exam_key,omitempty"` // unique exam key for the student to join the exam
	Name                string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Subject             string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	ExamType            ExamType               `protobuf:"varint,7,opt,name=exam_type,json=examType,proto3,enum=exams.ExamType" json:"exam_type,omitempty"`
	Status              ExamStatus             `protobuf:"varint,8,opt,name=status,proto3,enum=exams.ExamStatus" json:"status,omitempty"`
	CreatedAt           string                 `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           string                 `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TotalMarks          int32                  `protobuf:"varint,11,opt,name=total_marks,json=totalMarks,proto3" json:"total_marks,omitempty"`
	TotalQuestions      int32                  `protobuf:"varint,12,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	ActualStartDateTime string                 `protobuf:"bytes,13,opt,name=actual_start_date_time,json=actualStartDateTime,proto3" json:"actual_start_date_time,omitempty"`
	ActualEndDateTime   string                 `protobuf:"bytes,14,opt,name=actual_end_date_time,json=actualEndDateTime,proto3" json:"actual_end_date_time,omitempty"`
	// common
	QuestionBankIds    []string `protobuf:"bytes,15,rep,name=question_bank_ids,json=questionBankIds,proto3" json:"question_bank_ids,omitempty"`
	RandomizeQuestions bool     `protobuf:"varint,16,opt,name=randomize_questions,json=randomizeQuestions,proto3" json:"randomize_questions,omitempty"`
	RandomizeOptions   bool     `protobuf:"varint,17,opt,name=randomize_options,json=randomizeOptions,proto3" json:"randomize_options,omitempty"`
	// timed
	Duration               int32     `protobuf:"varint,18,opt,name=duration,proto3" json:"duration,omitempty"`
	StartMode              StartMode `protobuf:"varint,19,opt,name=start_mode,json=startMode,proto3,enum=exams.StartMode" json:"start_mode,omitempty"`
	ScheduledStartDateTime string    `protobuf:"bytes,20,opt,name=scheduled_start_date_time,json=scheduledStartDateTime,proto3" json:"scheduled_start_date_time,omitempty"`
	// deadline
	StartDateTime       string `protobuf:"bytes,21,opt,name=start_date_time,json=startDateTime,proto3" json:"start_date_time,omitempty"`
	EndDateTime         string `protobuf:"bytes,22,opt,name=end_date_time,json=endDateTime,proto3" json:"end_date_time,omitempty"`
	PerStudentTimeLimit bool   `protobuf:"varint,23,opt,name=per_student_time_limit,json=perStudentTimeLimit,proto3" json:"per_student_time_limit,omitempty"`
	PerStudentDuration  int32  `protobuf:"varint,24,opt,name=per_student_duration,json=perStudentDuration,proto3" json:"per_student_duration,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Exam) Reset() {
	*x = Exam{}
	mi := &file_exams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exam) ProtoMessage() {}

func (x *Exam) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exam.ProtoReflect.Descriptor instead.
func (*Exam) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{0}
}

func (x *Exam) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Exam) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *Exam) GetExamKey() string {
	if x != nil {
		return x.ExamKey
	}
	return ""
}

func (x *Exam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Exam) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Exam) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Exam) GetExamType() ExamType {
	if x != nil {
		return x.ExamType
	}
	return ExamType_TIMED
}

func (x *Exam) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_UNKNOWN
}

func (x *Exam) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Exam) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Exam) GetTotalMarks() int32 {
	if x != nil {
		return x.TotalMarks
	}
	return 0
}

func (x *Exam) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *Exam) GetActualStartDateTime() string {
	if x != nil {
		return x.ActualStartDateTime
	}
	return ""
}

func (x *Exam) GetActualEndDateTime() string {
	if x != nil {
		return x.ActualEndDateTime
	}
	return ""
}

func (x *Exam) GetQuestionBankIds() []string {
	if x != nil {
		return x.QuestionBankIds
	}
	return nil
}

func (x *Exam) GetRandomizeQuestions() bool {
	if x != nil {
		return x.RandomizeQuestions
	}
	return false
}

func (x *Exam) GetRandomizeOptions() bool {
	if x != nil {
		return x.RandomizeOptions
	}
	return false
}

func (x *Exam) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Exam) GetStartMode() StartMode {
	if x != nil {
		return x.StartMode
	}
	return StartMode_START_MODE_UNSPECIFIED
}

func (x *Exam) GetScheduledStartDateTime() string {
	if x != nil {
		return x.ScheduledStartDateTime
	}
	return ""
}

func (x *Exam) GetStartDateTime() string {
	if x != nil {
		return x.StartDateTime
	}
	return ""
}

func (x *Exam) GetEndDateTime() string {
	if x != nil {
		return x.EndDateTime
	}
	return ""
}

func (x *Exam) GetPerStudentTimeLimit() bool {
	if x != nil {
		return x.PerStudentTimeLimit
	}
	return false
}

func (x *Exam) GetPerStudentDuration() int32 {
	if x != nil {
		return x.PerStudentDuration
	}
	return 0
}

// --- Messages: Create and schedule exam ---
type CreateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExamRequest) Reset() {
	*x = CreateExamRequest{}
	mi := &file_exams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamRequest) ProtoMessage() {}

func (x *CreateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamRequest.ProtoReflect.Descriptor instead.
func (*CreateExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{1}
}

func (x *CreateExamRequest) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type CreateExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateExamResponse) Reset() {
	*x = CreateExamResponse{}
	mi := &file_exams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamResponse) ProtoMessage() {}

func (x *CreateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamResponse.ProtoReflect.Descriptor instead.
func (*CreateExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{2}
}

func (x *CreateExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamsRequest) Reset() {
	*x = GetExamsRequest{}
	mi := &file_exams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamsRequest) ProtoMessage() {}

func (x *GetExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamsRequest.ProtoReflect.Descriptor instead.
func (*GetExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{3}
}

func (x *GetExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamsResponse) Reset() {
	*x = GetExamsResponse{}
	mi := &file_exams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamsResponse) ProtoMessage() {}

func (x *GetExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamsResponse.ProtoReflect.Descriptor instead.
func (*GetExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{4}
}

func (x *GetExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

type UpdateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamRequest) Reset() {
	*x = UpdateExamRequest{}
	mi := &file_exams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamRequest) ProtoMessage() {}

func (x *UpdateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamRequest.ProtoReflect.Descriptor instead.
func (*UpdateExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateExamRequest) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type UpdateExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamResponse) Reset() {
	*x = UpdateExamResponse{}
	mi := &file_exams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamResponse) ProtoMessage() {}

func (x *UpdateExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamResponse.ProtoReflect.Descriptor instead.
func (*UpdateExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamRequest) Reset() {
	*x = DeleteExamRequest{}
	mi := &file_exams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamRequest) ProtoMessage() {}

func (x *DeleteExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *DeleteExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type DeleteExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamResponse) Reset() {
	*x = DeleteExamResponse{}
	mi := &file_exams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamResponse) ProtoMessage() {}

func (x *DeleteExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamResponse.ProtoReflect.Descriptor instead.
func (*DeleteExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ScheduleExamRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ExamId                 string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	ScheduledStartDateTime string                 `protobuf:"bytes,2,opt,name=scheduled_start_date_time,json=scheduledStartDateTime,proto3" json:"scheduled_start_date_time,omitempty"`
	CreatedBy              string                 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` //   on the DB change the exam mode to scheduled
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ScheduleExamRequest) Reset() {
	*x = ScheduleExamRequest{}
	mi := &file_exams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExamRequest) ProtoMessage() {}

func (x *ScheduleExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExamRequest.ProtoReflect.Descriptor instead.
func (*ScheduleExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{9}
}

func (x *ScheduleExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ScheduleExamRequest) GetScheduledStartDateTime() string {
	if x != nil {
		return x.ScheduledStartDateTime
	}
	return ""
}

func (x *ScheduleExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ScheduleExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScheduleExamResponse) Reset() {
	*x = ScheduleExamResponse{}
	mi := &file_exams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleExamResponse) ProtoMessage() {}

func (x *ScheduleExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleExamResponse.ProtoReflect.Descriptor instead.
func (*ScheduleExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{10}
}

func (x *ScheduleExamResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamRequest) Reset() {
	*x = GetExamRequest{}
	mi := &file_exams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamRequest) ProtoMessage() {}

func (x *GetExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamRequest.ProtoReflect.Descriptor instead.
func (*GetExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{11}
}

func (x *GetExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetExamRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exam          *Exam                  `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamResponse) Reset() {
	*x = GetExamResponse{}
	mi := &file_exams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamResponse) ProtoMessage() {}

func (x *GetExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamResponse.ProtoReflect.Descriptor instead.
func (*GetExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{12}
}

func (x *GetExamResponse) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type GetAllScheduledExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllScheduledExamsRequest) Reset() {
	*x = GetAllScheduledExamsRequest{}
	mi := &file_exams_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllScheduledExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllScheduledExamsRequest) ProtoMessage() {}

func (x *GetAllScheduledExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllScheduledExamsRequest.ProtoReflect.Descriptor instead.
func (*GetAllScheduledExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllScheduledExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetAllScheduledExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllScheduledExamsResponse) Reset() {
	*x = GetAllScheduledExamsResponse{}
	mi := &file_exams_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllScheduledExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllScheduledExamsResponse) ProtoMessage() {}

func (x *GetAllScheduledExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllScheduledExamsResponse.ProtoReflect.Descriptor instead.
func (*GetAllScheduledExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllScheduledExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

type GetAllLiveExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedBy     string                 `protobuf:"bytes,1,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLiveExamsRequest) Reset() {
	*x = GetAllLiveExamsRequest{}
	mi := &file_exams_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLiveExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLiveExamsRequest) ProtoMessage() {}

func (x *GetAllLiveExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLiveExamsRequest.ProtoReflect.Descriptor instead.
func (*GetAllLiveExamsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllLiveExamsRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type GetAllLiveExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllLiveExamsResponse) Reset() {
	*x = GetAllLiveExamsResponse{}
	mi := &file_exams_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllLiveExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllLiveExamsResponse) ProtoMessage() {}

func (x *GetAllLiveExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllLiveExamsResponse.ProtoReflect.Descriptor instead.
func (*GetAllLiveExamsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllLiveExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

// --- Messages: Start / End exam ---
type StartTimedExamManuallyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTimedExamManuallyRequest) Reset() {
	*x = StartTimedExamManuallyRequest{}
	mi := &file_exams_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTimedExamManuallyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimedExamManuallyRequest) ProtoMessage() {}

func (x *StartTimedExamManuallyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimedExamManuallyRequest.ProtoReflect.Descriptor instead.
func (*StartTimedExamManuallyRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{17}
}

func (x *StartTimedExamManuallyRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *StartTimedExamManuallyRequest) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type StartTimedExamManuallyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartTimedExamManuallyResponse) Reset() {
	*x = StartTimedExamManuallyResponse{}
	mi := &file_exams_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartTimedExamManuallyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTimedExamManuallyResponse) ProtoMessage() {}

func (x *StartTimedExamManuallyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTimedExamManuallyResponse.ProtoReflect.Descriptor instead.
func (*StartTimedExamManuallyResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{18}
}

func (x *StartTimedExamManuallyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type EndExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndExamRequest) Reset() {
	*x = EndExamRequest{}
	mi := &file_exams_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndExamRequest) ProtoMessage() {}

func (x *EndExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndExamRequest.ProtoReflect.Descriptor instead.
func (*EndExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{19}
}

func (x *EndExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *EndExamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type EndExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EndedAt       string                 `protobuf:"bytes,1,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndExamResponse) Reset() {
	*x = EndExamResponse{}
	mi := &file_exams_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndExamResponse) ProtoMessage() {}

func (x *EndExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndExamResponse.ProtoReflect.Descriptor instead.
func (*EndExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{20}
}

func (x *EndExamResponse) GetEndedAt() string {
	if x != nil {
		return x.EndedAt
	}
	return ""
}

// --- Messages: Live state & events ---
type GetExamLiveStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamLiveStateRequest) Reset() {
	*x = GetExamLiveStateRequest{}
	mi := &file_exams_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamLiveStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamLiveStateRequest) ProtoMessage() {}

func (x *GetExamLiveStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamLiveStateRequest.ProtoReflect.Descriptor instead.
func (*GetExamLiveStateRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{21}
}

func (x *GetExamLiveStateRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type GetExamLiveStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        ExamStatus             `protobuf:"varint,1,opt,name=status,proto3,enum=exams.ExamStatus" json:"status,omitempty"`
	StartedAt     string                 `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndsAt        string                 `protobuf:"bytes,3,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	ServerTime    string                 `protobuf:"bytes,4,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamLiveStateResponse) Reset() {
	*x = GetExamLiveStateResponse{}
	mi := &file_exams_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamLiveStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamLiveStateResponse) ProtoMessage() {}

func (x *GetExamLiveStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamLiveStateResponse.ProtoReflect.Descriptor instead.
func (*GetExamLiveStateResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{22}
}

func (x *GetExamLiveStateResponse) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_UNKNOWN
}

func (x *GetExamLiveStateResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *GetExamLiveStateResponse) GetEndsAt() string {
	if x != nil {
		return x.EndsAt
	}
	return ""
}

func (x *GetExamLiveStateResponse) GetServerTime() string {
	if x != nil {
		return x.ServerTime
	}
	return ""
}

type StreamExamEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamExamEventsRequest) Reset() {
	*x = StreamExamEventsRequest{}
	mi := &file_exams_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamExamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamExamEventsRequest) ProtoMessage() {}

func (x *StreamExamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamExamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamExamEventsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{23}
}

func (x *StreamExamEventsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

type ExamEvent struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      ExamEvent_EventType    `protobuf:"varint,1,opt,name=type,proto3,enum=exams.ExamEvent_EventType" json:"type,omitempty"`
	Timestamp string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// for TIME_SYNC, payload.remaining_ms could be filled
	RemainingMs   int64 `protobuf:"varint,3,opt,name=remaining_ms,json=remainingMs,proto3" json:"remaining_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExamEvent) Reset() {
	*x = ExamEvent{}
	mi := &file_exams_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamEvent) ProtoMessage() {}

func (x *ExamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamEvent.ProtoReflect.Descriptor instead.
func (*ExamEvent) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{24}
}

func (x *ExamEvent) GetType() ExamEvent_EventType {
	if x != nil {
		return x.Type
	}
	return ExamEvent_EXAM_STARTED
}

func (x *ExamEvent) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *ExamEvent) GetRemainingMs() int64 {
	if x != nil {
		return x.RemainingMs
	}
	return 0
}

// --- Messages: Student join & submission ---
type JoinExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinExamRequest) Reset() {
	*x = JoinExamRequest{}
	mi := &file_exams_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinExamRequest) ProtoMessage() {}

func (x *JoinExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinExamRequest.ProtoReflect.Descriptor instead.
func (*JoinExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{25}
}

func (x *JoinExamRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *JoinExamRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type JoinExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Status        ExamStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=exams.ExamStatus" json:"status,omitempty"`
	StartedAt     string                 `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndsAt        string                 `protobuf:"bytes,4,opt,name=ends_at,json=endsAt,proto3" json:"ends_at,omitempty"`
	ServerTime    string                 `protobuf:"bytes,5,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinExamResponse) Reset() {
	*x = JoinExamResponse{}
	mi := &file_exams_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinExamResponse) ProtoMessage() {}

func (x *JoinExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinExamResponse.ProtoReflect.Descriptor instead.
func (*JoinExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{26}
}

func (x *JoinExamResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinExamResponse) GetStatus() ExamStatus {
	if x != nil {
		return x.Status
	}
	return ExamStatus_UNKNOWN
}

func (x *JoinExamResponse) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *JoinExamResponse) GetEndsAt() string {
	if x != nil {
		return x.EndsAt
	}
	return ""
}

func (x *JoinExamResponse) GetServerTime() string {
	if x != nil {
		return x.ServerTime
	}
	return ""
}

type SubmitAnswerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	StudentId     string                 `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Answer        string                 `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"` // could be JSON for complex types
	AnsweredAt    string                 `protobuf:"bytes,5,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_exams_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{27}
}

func (x *SubmitAnswerRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *SubmitAnswerRequest) GetAnsweredAt() string {
	if x != nil {
		return x.AnsweredAt
	}
	return ""
}

type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_exams_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{28}
}

func (x *SubmitAnswerResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type SubmitExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamRequest) Reset() {
	*x = SubmitExamRequest{}
	mi := &file_exams_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamRequest) ProtoMessage() {}

func (x *SubmitExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamRequest.ProtoReflect.Descriptor instead.
func (*SubmitExamRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{29}
}

func (x *SubmitExamRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SubmitExamRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type SubmitExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accepted      bool                   `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamResponse) Reset() {
	*x = SubmitExamResponse{}
	mi := &file_exams_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResponse) ProtoMessage() {}

func (x *SubmitExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResponse.ProtoReflect.Descriptor instead.
func (*SubmitExamResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{30}
}

func (x *SubmitExamResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

// --- Messages: Results ---
type PublishResultsRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ExamId string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	// optionally a list of student_ids to publish, or all
	StudentIds    []string `protobuf:"bytes,2,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResultsRequest) Reset() {
	*x = PublishResultsRequest{}
	mi := &file_exams_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResultsRequest) ProtoMessage() {}

func (x *PublishResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResultsRequest.ProtoReflect.Descriptor instead.
func (*PublishResultsRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{31}
}

func (x *PublishResultsRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *PublishResultsRequest) GetStudentIds() []string {
	if x != nil {
		return x.StudentIds
	}
	return nil
}

type PublishResultsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PublishedCount int32                  `protobuf:"varint,1,opt,name=published_count,json=publishedCount,proto3" json:"published_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PublishResultsResponse) Reset() {
	*x = PublishResultsResponse{}
	mi := &file_exams_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResultsResponse) ProtoMessage() {}

func (x *PublishResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResultsResponse.ProtoReflect.Descriptor instead.
func (*PublishResultsResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{32}
}

func (x *PublishResultsResponse) GetPublishedCount() int32 {
	if x != nil {
		return x.PublishedCount
	}
	return 0
}

type GetResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExamId        string                 `protobuf:"bytes,1,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	StudentId     string                 `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultRequest) Reset() {
	*x = GetResultRequest{}
	mi := &file_exams_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultRequest) ProtoMessage() {}

func (x *GetResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultRequest.ProtoReflect.Descriptor instead.
func (*GetResultRequest) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{33}
}

func (x *GetResultRequest) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *GetResultRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

type GetResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Score         float64                `protobuf:"fixed64,1,opt,name=score,proto3" json:"score,omitempty"`
	Details       []*QuestionResult      `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResultResponse) Reset() {
	*x = GetResultResponse{}
	mi := &file_exams_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultResponse) ProtoMessage() {}

func (x *GetResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultResponse.ProtoReflect.Descriptor instead.
func (*GetResultResponse) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{34}
}

func (x *GetResultResponse) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GetResultResponse) GetDetails() []*QuestionResult {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuestionResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Score         float64                `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Feedback      string                 `protobuf:"bytes,3,opt,name=feedback,proto3" json:"feedback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestionResult) Reset() {
	*x = QuestionResult{}
	mi := &file_exams_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionResult) ProtoMessage() {}

func (x *QuestionResult) ProtoReflect() protoreflect.Message {
	mi := &file_exams_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionResult.ProtoReflect.Descriptor instead.
func (*QuestionResult) Descriptor() ([]byte, []int) {
	return file_exams_proto_rawDescGZIP(), []int{35}
}

func (x *QuestionResult) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *QuestionResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *QuestionResult) GetFeedback() string {
	if x != nil {
		return x.Feedback
	}
	return ""
}

var File_exams_proto protoreflect.FileDescriptor

var file_exams_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x22, 0xb5, 0x07, 0x0a, 0x04, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2c, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x65, 0x72, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78,
	0x61, 0x6d, 0x22, 0x2e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x22, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61,
	0x6d, 0x22, 0x2e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x4b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x2e,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x88,
	0x01, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x32, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x3c, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x41, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x22, 0x57, 0x0a, 0x1d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45,
	0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x3a, 0x0a, 0x1e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x2c, 0x0a, 0x0f, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x73,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x22, 0x3c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x22, 0x49, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb5, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x32, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x30,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x22, 0x51, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x41, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x63,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x2a, 0x23, 0x0a, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x6d, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47,
	0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x58, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10,
	0x02, 0x32, 0x8e, 0x07, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73,
	0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x24, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x45, 0x78, 0x61, 0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x15, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45,
	0x6e, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xe5, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x4a, 0x6f, 0x69,
	0x6e, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x18, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x42, 0x04, 0x5a, 0x02, 0x2f, 0x2e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_exams_proto_rawDescOnce sync.Once
	file_exams_proto_rawDescData []byte
)

func file_exams_proto_rawDescGZIP() []byte {
	file_exams_proto_rawDescOnce.Do(func() {
		file_exams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exams_proto_rawDesc), len(file_exams_proto_rawDesc)))
	})
	return file_exams_proto_rawDescData
}

var file_exams_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_exams_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_exams_proto_goTypes = []any{
	(ExamType)(0),                          // 0: exams.ExamType
	(ExamStatus)(0),                        // 1: exams.ExamStatus
	(StartMode)(0),                         // 2: exams.StartMode
	(ExamEvent_EventType)(0),               // 3: exams.ExamEvent.EventType
	(*Exam)(nil),                           // 4: exams.Exam
	(*CreateExamRequest)(nil),              // 5: exams.CreateExamRequest
	(*CreateExamResponse)(nil),             // 6: exams.CreateExamResponse
	(*GetExamsRequest)(nil),                // 7: exams.GetExamsRequest
	(*GetExamsResponse)(nil),               // 8: exams.GetExamsResponse
	(*UpdateExamRequest)(nil),              // 9: exams.UpdateExamRequest
	(*UpdateExamResponse)(nil),             // 10: exams.UpdateExamResponse
	(*DeleteExamRequest)(nil),              // 11: exams.DeleteExamRequest
	(*DeleteExamResponse)(nil),             // 12: exams.DeleteExamResponse
	(*ScheduleExamRequest)(nil),            // 13: exams.ScheduleExamRequest
	(*ScheduleExamResponse)(nil),           // 14: exams.ScheduleExamResponse
	(*GetExamRequest)(nil),                 // 15: exams.GetExamRequest
	(*GetExamResponse)(nil),                // 16: exams.GetExamResponse
	(*GetAllScheduledExamsRequest)(nil),    // 17: exams.GetAllScheduledExamsRequest
	(*GetAllScheduledExamsResponse)(nil),   // 18: exams.GetAllScheduledExamsResponse
	(*GetAllLiveExamsRequest)(nil),         // 19: exams.GetAllLiveExamsRequest
	(*GetAllLiveExamsResponse)(nil),        // 20: exams.GetAllLiveExamsResponse
	(*StartTimedExamManuallyRequest)(nil),  // 21: exams.StartTimedExamManuallyRequest
	(*StartTimedExamManuallyResponse)(nil), // 22: exams.StartTimedExamManuallyResponse
	(*EndExamRequest)(nil),                 // 23: exams.EndExamRequest
	(*EndExamResponse)(nil),                // 24: exams.EndExamResponse
	(*GetExamLiveStateRequest)(nil),        // 25: exams.GetExamLiveStateRequest
	(*GetExamLiveStateResponse)(nil),       // 26: exams.GetExamLiveStateResponse
	(*StreamExamEventsRequest)(nil),        // 27: exams.StreamExamEventsRequest
	(*ExamEvent)(nil),                      // 28: exams.ExamEvent
	(*JoinExamRequest)(nil),                // 29: exams.JoinExamRequest
	(*JoinExamResponse)(nil),               // 30: exams.JoinExamResponse
	(*SubmitAnswerRequest)(nil),            // 31: exams.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),           // 32: exams.SubmitAnswerResponse
	(*SubmitExamRequest)(nil),              // 33: exams.SubmitExamRequest
	(*SubmitExamResponse)(nil),             // 34: exams.SubmitExamResponse
	(*PublishResultsRequest)(nil),          // 35: exams.PublishResultsRequest
	(*PublishResultsResponse)(nil),         // 36: exams.PublishResultsResponse
	(*GetResultRequest)(nil),               // 37: exams.GetResultRequest
	(*GetResultResponse)(nil),              // 38: exams.GetResultResponse
	(*QuestionResult)(nil),                 // 39: exams.QuestionResult
}
var file_exams_proto_depIdxs = []int32{
	0,  // 0: exams.Exam.exam_type:type_name -> exams.ExamType
	1,  // 1: exams.Exam.status:type_name -> exams.ExamStatus
	2,  // 2: exams.Exam.start_mode:type_name -> exams.StartMode
	4,  // 3: exams.CreateExamRequest.exam:type_name -> exams.Exam
	4,  // 4: exams.GetExamsResponse.exams:type_name -> exams.Exam
	4,  // 5: exams.UpdateExamRequest.exam:type_name -> exams.Exam
	4,  // 6: exams.GetExamResponse.exam:type_name -> exams.Exam
	4,  // 7: exams.GetAllScheduledExamsResponse.exams:type_name -> exams.Exam
	4,  // 8: exams.GetAllLiveExamsResponse.exams:type_name -> exams.Exam
	1,  // 9: exams.GetExamLiveStateResponse.status:type_name -> exams.ExamStatus
	3,  // 10: exams.ExamEvent.type:type_name -> exams.ExamEvent.EventType
	1,  // 11: exams.JoinExamResponse.status:type_name -> exams.ExamStatus
	39, // 12: exams.GetResultResponse.details:type_name -> exams.QuestionResult
	5,  // 13: exams.ExamService.CreateExam:input_type -> exams.CreateExamRequest
	7,  // 14: exams.ExamService.GetExams:input_type -> exams.GetExamsRequest
	17, // 15: exams.ExamService.GetAllScheduledExams:input_type -> exams.GetAllScheduledExamsRequest
	19, // 16: exams.ExamService.GetAllLiveExams:input_type -> exams.GetAllLiveExamsRequest
	15, // 17: exams.ExamService.GetExam:input_type -> exams.GetExamRequest
	9,  // 18: exams.ExamService.UpdateExam:input_type -> exams.UpdateExamRequest
	11, // 19: exams.ExamService.DeleteExam:input_type -> exams.DeleteExamRequest
	13, // 20: exams.ExamService.ScheduleExam:input_type -> exams.ScheduleExamRequest
	21, // 21: exams.ExamService.StartTimedExamManually:input_type -> exams.StartTimedExamManuallyRequest
	23, // 22: exams.ExamService.EndExam:input_type -> exams.EndExamRequest
	35, // 23: exams.ExamService.PublishResults:input_type -> exams.PublishResultsRequest
	25, // 24: exams.ExamService.GetExamLiveState:input_type -> exams.GetExamLiveStateRequest
	29, // 25: exams.StudentExamService.JoinExam:input_type -> exams.JoinExamRequest
	31, // 26: exams.StudentExamService.SubmitAnswer:input_type -> exams.SubmitAnswerRequest
	33, // 27: exams.StudentExamService.SubmitExam:input_type -> exams.SubmitExamRequest
	37, // 28: exams.StudentExamService.GetResult:input_type -> exams.GetResultRequest
	27, // 29: exams.StudentExamService.StreamExamEvents:input_type -> exams.StreamExamEventsRequest
	6,  // 30: exams.ExamService.CreateExam:output_type -> exams.CreateExamResponse
	8,  // 31: exams.ExamService.GetExams:output_type -> exams.GetExamsResponse
	18, // 32: exams.ExamService.GetAllScheduledExams:output_type -> exams.GetAllScheduledExamsResponse
	20, // 33: exams.ExamService.GetAllLiveExams:output_type -> exams.GetAllLiveExamsResponse
	16, // 34: exams.ExamService.GetExam:output_type -> exams.GetExamResponse
	10, // 35: exams.ExamService.UpdateExam:output_type -> exams.UpdateExamResponse
	12, // 36: exams.ExamService.DeleteExam:output_type -> exams.DeleteExamResponse
	14, // 37: exams.ExamService.ScheduleExam:output_type -> exams.ScheduleExamResponse
	22, // 38: exams.ExamService.StartTimedExamManually:output_type -> exams.StartTimedExamManuallyResponse
	24, // 39: exams.ExamService.EndExam:output_type -> exams.EndExamResponse
	36, // 40: exams.ExamService.PublishResults:output_type -> exams.PublishResultsResponse
	26, // 41: exams.ExamService.GetExamLiveState:output_type -> exams.GetExamLiveStateResponse
	30, // 42: exams.StudentExamService.JoinExam:output_type -> exams.JoinExamResponse
	32, // 43: exams.StudentExamService.SubmitAnswer:output_type -> exams.SubmitAnswerResponse
	34, // 44: exams.StudentExamService.SubmitExam:output_type -> exams.SubmitExamResponse
	38, // 45: exams.StudentExamService.GetResult:output_type -> exams.GetResultResponse
	28, // 46: exams.StudentExamService.StreamExamEvents:output_type -> exams.ExamEvent
	30, // [30:47] is the sub-list for method output_type
	13, // [13:30] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_exams_proto_init() }
func file_exams_proto_init() {
	if File_exams_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exams_proto_rawDesc), len(file_exams_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_exams_proto_goTypes,
		DependencyIndexes: file_exams_proto_depIdxs,
		EnumInfos:         file_exams_proto_enumTypes,
		MessageInfos:      file_exams_proto_msgTypes,
	}.Build()
	File_exams_proto = out.File
	file_exams_proto_goTypes = nil
	file_exams_proto_depIdxs = nil
}
