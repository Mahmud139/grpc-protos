// syntax = "proto3";

// package exams;

// option go_package = "/exams";

// // ENUMS
// enum AssignmentStatus {
//   ASSIGNMENT_STATUS_UNSPECIFIED = 0;
//   ASSIGNED = 1;
//   IN_PROGRESS = 2;
//   SUBMITTED = 3;
//   GRADED = 4;
// }

// // MESSAGES
// message Exam {
//   string id = 1;
//   string title = 2;
//   string description = 3;
//   repeated string question_bank_ids = 4;
//   string start_time = 5;
//   string end_time = 6;
//   int32 duration_minutes = 7;
//   bool allow_late_submission = 8;
//   string created_by = 9;
//   string created_at = 10;
// }

// message ExamAssignment {
//   string exam_id = 1;
//   string student_id = 2;
//   AssignmentStatus status = 3;
//   string submitted_at = 4;
//   string graded_at = 5;
// }

// message ExamQuestion {
//   string id = 1;
//   string exam_id = 2;
//   string question_id = 3; // from question_bank
// }

// // Used in answer submission
// message StudentAnswer {
//   string id = 1;
//   string exam_id = 2;
//   string exam_question_id = 3;
//   string student_id = 4;
//   repeated string selected_option_ids = 5;
//   repeated string blank_answers = 6;
//   string text_answer = 7;
//   bool is_marked = 8;
//   bool is_correct = 9;
//   int32 score = 10;
//   string marked_at = 11;
// }

// // REQUESTS / RESPONSES
// message CreateExamRequest {
//   Exam exam = 1;
// }

// message CreateExamResponse {
//   string id = 1;
// }

// message AssignStudentsRequest {
//   string exam_id = 1;
//   repeated string student_ids = 2;
// }

// message SubmitAnswerRequest {
//   StudentAnswer answer = 1;
// }

// message SubmitAnswerResponse {}

// message GetExamAssignmentsRequest {
//   string exam_id = 1;
// }

// message GetExamAssignmentsResponse {
//   repeated ExamAssignment assignments = 1;
// }

// message GetStudentAnswersRequest {
//   string exam_id = 1;
//   string student_id = 2;
// }

// message GetStudentAnswersResponse {
//   repeated StudentAnswer answers = 1;
// }

// // SERVICE
// service ExamManagementService {
//   rpc CreateExam(CreateExamRequest) returns (CreateExamResponse);
// //   rpc AssignStudents(AssignStudentsRequest) returns (google.protobuf.Empty);
//   rpc SubmitAnswer(SubmitAnswerRequest) returns (SubmitAnswerResponse);
//   rpc GetExamAssignments(GetExamAssignmentsRequest) returns (GetExamAssignmentsResponse);
//   rpc GetStudentAnswers(GetStudentAnswersRequest) returns (GetStudentAnswersResponse);
// }

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: exams.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExamService_CreateExam_FullMethodName       = "/exams.ExamService/CreateExam"
	ExamService_GetExams_FullMethodName         = "/exams.ExamService/GetExams"
	ExamService_GetExam_FullMethodName          = "/exams.ExamService/GetExam"
	ExamService_UpdateExam_FullMethodName       = "/exams.ExamService/UpdateExam"
	ExamService_DeleteExam_FullMethodName       = "/exams.ExamService/DeleteExam"
	ExamService_ScheduleExam_FullMethodName     = "/exams.ExamService/ScheduleExam"
	ExamService_StartExam_FullMethodName        = "/exams.ExamService/StartExam"
	ExamService_EndExam_FullMethodName          = "/exams.ExamService/EndExam"
	ExamService_PublishResults_FullMethodName   = "/exams.ExamService/PublishResults"
	ExamService_GetExamLiveState_FullMethodName = "/exams.ExamService/GetExamLiveState"
)

// ExamServiceClient is the client API for ExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Exam service (teacher/admin) ---
type ExamServiceClient interface {
	// Create a new exam (timed or deadline)
	CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error)
	// Get all exams
	GetExams(ctx context.Context, in *GetExamsRequest, opts ...grpc.CallOption) (*GetExamsResponse, error)
	// get an exam
	GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error)
	// Update an exam
	UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error)
	// Delete an exam
	DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error)
	// Schedule an exam that was created with manual_start = false
	ScheduleExam(ctx context.Context, in *ScheduleExamRequest, opts ...grpc.CallOption) (*ScheduleExamResponse, error)
	// Start a manual-start exam now
	StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error)
	// End a running exam immediately
	EndExam(ctx context.Context, in *EndExamRequest, opts ...grpc.CallOption) (*EndExamResponse, error)
	// Publish results after grading
	PublishResults(ctx context.Context, in *PublishResultsRequest, opts ...grpc.CallOption) (*PublishResultsResponse, error)
	// Query live state (for students reconnect)
	GetExamLiveState(ctx context.Context, in *GetExamLiveStateRequest, opts ...grpc.CallOption) (*GetExamLiveStateResponse, error)
}

type examServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExamServiceClient(cc grpc.ClientConnInterface) ExamServiceClient {
	return &examServiceClient{cc}
}

func (c *examServiceClient) CreateExam(ctx context.Context, in *CreateExamRequest, opts ...grpc.CallOption) (*CreateExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExamResponse)
	err := c.cc.Invoke(ctx, ExamService_CreateExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExams(ctx context.Context, in *GetExamsRequest, opts ...grpc.CallOption) (*GetExamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamsResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExam(ctx context.Context, in *GetExamRequest, opts ...grpc.CallOption) (*GetExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) UpdateExam(ctx context.Context, in *UpdateExamRequest, opts ...grpc.CallOption) (*UpdateExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExamResponse)
	err := c.cc.Invoke(ctx, ExamService_UpdateExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) DeleteExam(ctx context.Context, in *DeleteExamRequest, opts ...grpc.CallOption) (*DeleteExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExamResponse)
	err := c.cc.Invoke(ctx, ExamService_DeleteExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) ScheduleExam(ctx context.Context, in *ScheduleExamRequest, opts ...grpc.CallOption) (*ScheduleExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScheduleExamResponse)
	err := c.cc.Invoke(ctx, ExamService_ScheduleExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) StartExam(ctx context.Context, in *StartExamRequest, opts ...grpc.CallOption) (*StartExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartExamResponse)
	err := c.cc.Invoke(ctx, ExamService_StartExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) EndExam(ctx context.Context, in *EndExamRequest, opts ...grpc.CallOption) (*EndExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndExamResponse)
	err := c.cc.Invoke(ctx, ExamService_EndExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) PublishResults(ctx context.Context, in *PublishResultsRequest, opts ...grpc.CallOption) (*PublishResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResultsResponse)
	err := c.cc.Invoke(ctx, ExamService_PublishResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examServiceClient) GetExamLiveState(ctx context.Context, in *GetExamLiveStateRequest, opts ...grpc.CallOption) (*GetExamLiveStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExamLiveStateResponse)
	err := c.cc.Invoke(ctx, ExamService_GetExamLiveState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamServiceServer is the server API for ExamService service.
// All implementations must embed UnimplementedExamServiceServer
// for forward compatibility.
//
// --- Exam service (teacher/admin) ---
type ExamServiceServer interface {
	// Create a new exam (timed or deadline)
	CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error)
	// Get all exams
	GetExams(context.Context, *GetExamsRequest) (*GetExamsResponse, error)
	// get an exam
	GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error)
	// Update an exam
	UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error)
	// Delete an exam
	DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error)
	// Schedule an exam that was created with manual_start = false
	ScheduleExam(context.Context, *ScheduleExamRequest) (*ScheduleExamResponse, error)
	// Start a manual-start exam now
	StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error)
	// End a running exam immediately
	EndExam(context.Context, *EndExamRequest) (*EndExamResponse, error)
	// Publish results after grading
	PublishResults(context.Context, *PublishResultsRequest) (*PublishResultsResponse, error)
	// Query live state (for students reconnect)
	GetExamLiveState(context.Context, *GetExamLiveStateRequest) (*GetExamLiveStateResponse, error)
	mustEmbedUnimplementedExamServiceServer()
}

// UnimplementedExamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExamServiceServer struct{}

func (UnimplementedExamServiceServer) CreateExam(context.Context, *CreateExamRequest) (*CreateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExam not implemented")
}
func (UnimplementedExamServiceServer) GetExams(context.Context, *GetExamsRequest) (*GetExamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExams not implemented")
}
func (UnimplementedExamServiceServer) GetExam(context.Context, *GetExamRequest) (*GetExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}
func (UnimplementedExamServiceServer) UpdateExam(context.Context, *UpdateExamRequest) (*UpdateExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExam not implemented")
}
func (UnimplementedExamServiceServer) DeleteExam(context.Context, *DeleteExamRequest) (*DeleteExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExam not implemented")
}
func (UnimplementedExamServiceServer) ScheduleExam(context.Context, *ScheduleExamRequest) (*ScheduleExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleExam not implemented")
}
func (UnimplementedExamServiceServer) StartExam(context.Context, *StartExamRequest) (*StartExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExam not implemented")
}
func (UnimplementedExamServiceServer) EndExam(context.Context, *EndExamRequest) (*EndExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndExam not implemented")
}
func (UnimplementedExamServiceServer) PublishResults(context.Context, *PublishResultsRequest) (*PublishResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishResults not implemented")
}
func (UnimplementedExamServiceServer) GetExamLiveState(context.Context, *GetExamLiveStateRequest) (*GetExamLiveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExamLiveState not implemented")
}
func (UnimplementedExamServiceServer) mustEmbedUnimplementedExamServiceServer() {}
func (UnimplementedExamServiceServer) testEmbeddedByValue()                     {}

// UnsafeExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamServiceServer will
// result in compilation errors.
type UnsafeExamServiceServer interface {
	mustEmbedUnimplementedExamServiceServer()
}

func RegisterExamServiceServer(s grpc.ServiceRegistrar, srv ExamServiceServer) {
	// If the following call pancis, it indicates UnimplementedExamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExamService_ServiceDesc, srv)
}

func _ExamService_CreateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).CreateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_CreateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).CreateExam(ctx, req.(*CreateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExams(ctx, req.(*GetExamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExam(ctx, req.(*GetExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_UpdateExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).UpdateExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_UpdateExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).UpdateExam(ctx, req.(*UpdateExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_DeleteExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).DeleteExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_DeleteExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).DeleteExam(ctx, req.(*DeleteExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_ScheduleExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).ScheduleExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_ScheduleExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).ScheduleExam(ctx, req.(*ScheduleExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_StartExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).StartExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_StartExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).StartExam(ctx, req.(*StartExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_EndExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).EndExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_EndExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).EndExam(ctx, req.(*EndExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_PublishResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).PublishResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_PublishResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).PublishResults(ctx, req.(*PublishResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamService_GetExamLiveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamLiveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamServiceServer).GetExamLiveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExamService_GetExamLiveState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamServiceServer).GetExamLiveState(ctx, req.(*GetExamLiveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExamService_ServiceDesc is the grpc.ServiceDesc for ExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exams.ExamService",
	HandlerType: (*ExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExam",
			Handler:    _ExamService_CreateExam_Handler,
		},
		{
			MethodName: "GetExams",
			Handler:    _ExamService_GetExams_Handler,
		},
		{
			MethodName: "GetExam",
			Handler:    _ExamService_GetExam_Handler,
		},
		{
			MethodName: "UpdateExam",
			Handler:    _ExamService_UpdateExam_Handler,
		},
		{
			MethodName: "DeleteExam",
			Handler:    _ExamService_DeleteExam_Handler,
		},
		{
			MethodName: "ScheduleExam",
			Handler:    _ExamService_ScheduleExam_Handler,
		},
		{
			MethodName: "StartExam",
			Handler:    _ExamService_StartExam_Handler,
		},
		{
			MethodName: "EndExam",
			Handler:    _ExamService_EndExam_Handler,
		},
		{
			MethodName: "PublishResults",
			Handler:    _ExamService_PublishResults_Handler,
		},
		{
			MethodName: "GetExamLiveState",
			Handler:    _ExamService_GetExamLiveState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exams.proto",
}

const (
	StudentExamService_JoinExam_FullMethodName         = "/exams.StudentExamService/JoinExam"
	StudentExamService_SubmitAnswer_FullMethodName     = "/exams.StudentExamService/SubmitAnswer"
	StudentExamService_SubmitExam_FullMethodName       = "/exams.StudentExamService/SubmitExam"
	StudentExamService_GetResult_FullMethodName        = "/exams.StudentExamService/GetResult"
	StudentExamService_StreamExamEvents_FullMethodName = "/exams.StudentExamService/StreamExamEvents"
)

// StudentExamServiceClient is the client API for StudentExamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Student exam interactions ---
type StudentExamServiceClient interface {
	// Student joins an exam (opens WS or initial handshake)
	JoinExam(ctx context.Context, in *JoinExamRequest, opts ...grpc.CallOption) (*JoinExamResponse, error)
	// Submit one answer (for live auto‐save)
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	// Submit entire exam (final submit)
	SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error)
	// Get published result
	GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error)
	// Stream real-time exam events (EXAM_STARTED, TIME_SYNC, EXAM_ENDED)
	StreamExamEvents(ctx context.Context, in *StreamExamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExamEvent], error)
}

type studentExamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentExamServiceClient(cc grpc.ClientConnInterface) StudentExamServiceClient {
	return &studentExamServiceClient{cc}
}

func (c *studentExamServiceClient) JoinExam(ctx context.Context, in *JoinExamRequest, opts ...grpc.CallOption) (*JoinExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinExamResponse)
	err := c.cc.Invoke(ctx, StudentExamService_JoinExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentExamServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, StudentExamService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentExamServiceClient) SubmitExam(ctx context.Context, in *SubmitExamRequest, opts ...grpc.CallOption) (*SubmitExamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitExamResponse)
	err := c.cc.Invoke(ctx, StudentExamService_SubmitExam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentExamServiceClient) GetResult(ctx context.Context, in *GetResultRequest, opts ...grpc.CallOption) (*GetResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResultResponse)
	err := c.cc.Invoke(ctx, StudentExamService_GetResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentExamServiceClient) StreamExamEvents(ctx context.Context, in *StreamExamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExamEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StudentExamService_ServiceDesc.Streams[0], StudentExamService_StreamExamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamExamEventsRequest, ExamEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StudentExamService_StreamExamEventsClient = grpc.ServerStreamingClient[ExamEvent]

// StudentExamServiceServer is the server API for StudentExamService service.
// All implementations must embed UnimplementedStudentExamServiceServer
// for forward compatibility.
//
// --- Student exam interactions ---
type StudentExamServiceServer interface {
	// Student joins an exam (opens WS or initial handshake)
	JoinExam(context.Context, *JoinExamRequest) (*JoinExamResponse, error)
	// Submit one answer (for live auto‐save)
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	// Submit entire exam (final submit)
	SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error)
	// Get published result
	GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error)
	// Stream real-time exam events (EXAM_STARTED, TIME_SYNC, EXAM_ENDED)
	StreamExamEvents(*StreamExamEventsRequest, grpc.ServerStreamingServer[ExamEvent]) error
	mustEmbedUnimplementedStudentExamServiceServer()
}

// UnimplementedStudentExamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentExamServiceServer struct{}

func (UnimplementedStudentExamServiceServer) JoinExam(context.Context, *JoinExamRequest) (*JoinExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinExam not implemented")
}
func (UnimplementedStudentExamServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedStudentExamServiceServer) SubmitExam(context.Context, *SubmitExamRequest) (*SubmitExamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExam not implemented")
}
func (UnimplementedStudentExamServiceServer) GetResult(context.Context, *GetResultRequest) (*GetResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedStudentExamServiceServer) StreamExamEvents(*StreamExamEventsRequest, grpc.ServerStreamingServer[ExamEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamExamEvents not implemented")
}
func (UnimplementedStudentExamServiceServer) mustEmbedUnimplementedStudentExamServiceServer() {}
func (UnimplementedStudentExamServiceServer) testEmbeddedByValue()                            {}

// UnsafeStudentExamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentExamServiceServer will
// result in compilation errors.
type UnsafeStudentExamServiceServer interface {
	mustEmbedUnimplementedStudentExamServiceServer()
}

func RegisterStudentExamServiceServer(s grpc.ServiceRegistrar, srv StudentExamServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudentExamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudentExamService_ServiceDesc, srv)
}

func _StudentExamService_JoinExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentExamServiceServer).JoinExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentExamService_JoinExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentExamServiceServer).JoinExam(ctx, req.(*JoinExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentExamService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentExamServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentExamService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentExamServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentExamService_SubmitExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentExamServiceServer).SubmitExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentExamService_SubmitExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentExamServiceServer).SubmitExam(ctx, req.(*SubmitExamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentExamService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentExamServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudentExamService_GetResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentExamServiceServer).GetResult(ctx, req.(*GetResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentExamService_StreamExamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamExamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentExamServiceServer).StreamExamEvents(m, &grpc.GenericServerStream[StreamExamEventsRequest, ExamEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StudentExamService_StreamExamEventsServer = grpc.ServerStreamingServer[ExamEvent]

// StudentExamService_ServiceDesc is the grpc.ServiceDesc for StudentExamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentExamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exams.StudentExamService",
	HandlerType: (*StudentExamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinExam",
			Handler:    _StudentExamService_JoinExam_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _StudentExamService_SubmitAnswer_Handler,
		},
		{
			MethodName: "SubmitExam",
			Handler:    _StudentExamService_SubmitExam_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _StudentExamService_GetResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExamEvents",
			Handler:       _StudentExamService_StreamExamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exams.proto",
}
